<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿犇</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="https://benyang0506.github.io/atom.xml" rel="self"/>
  
  <link href="https://benyang0506.github.io/"/>
  <updated>2021-06-15T08:36:28.506Z</updated>
  <id>https://benyang0506.github.io/</id>
  
  <author>
    <name>杨犇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数位成本和为目标值的最大数字</title>
    <link href="https://benyang0506.github.io/2021/06/15/%E6%95%B0%E4%BD%8D%E6%88%90%E6%9C%AC%E5%92%8C%E4%B8%BA%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97/"/>
    <id>https://benyang0506.github.io/2021/06/15/%E6%95%B0%E4%BD%8D%E6%88%90%E6%9C%AC%E5%92%8C%E4%B8%BA%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97/</id>
    <published>2021-06-15T07:54:06.000Z</published>
    <updated>2021-06-15T08:36:28.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.12 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/">https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给你一个整数数组 <code>cost</code> 和一个整数 <code>target</code> 。请你返回满足如下规则可以得到的 <strong>最大</strong> 整数：</p><ul><li>给当前结果添加一个数位（<code>i + 1</code>）的成本为 <code>cost[i]</code> （<code>cost</code> 数组下标从 0 开始）。</li><li>总成本必须恰好等于 <code>target</code> 。</li><li>添加的数位中没有数字 0 。</li></ul><p>由于答案可能会很大，请你以字符串形式返回。</p><p>如果按照上述要求无法得到任何整数，请你返回 “0” 。</p><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：cost = [4,3,2,5,6,7,2,5,5], target = 9</span><br><span class="line">输出：&quot;7772&quot;</span><br><span class="line">解释：添加数位 &#x27;7&#x27; 的成本为 2 ，添加数位 &#x27;2&#x27; 的成本为 3 。所以 &quot;7772&quot; 的代价为 2*3+ 3*1 = 9 。 &quot;977&quot; 也是满足要求的数字，但 &quot;7772&quot; 是较大的数字。</span><br><span class="line"> 数字     成本</span><br><span class="line">  1  -&gt;   4</span><br><span class="line">  2  -&gt;   3</span><br><span class="line">  3  -&gt;   2</span><br><span class="line">  4  -&gt;   5</span><br><span class="line">  5  -&gt;   6</span><br><span class="line">  6  -&gt;   7</span><br><span class="line">  7  -&gt;   2</span><br><span class="line">  8  -&gt;   5</span><br><span class="line">  9  -&gt;   5</span><br></pre></td></tr></table></figure><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cost = [7,6,5,5,5,6,8,7,8], target = 12</span><br><span class="line">输出：&quot;85&quot;</span><br><span class="line">解释：添加数位 &#x27;8&#x27; 的成本是 7 ，添加数位 &#x27;5&#x27; 的成本是 5 。&quot;85&quot; 的成本为 7 + 5 = 12 。</span><br></pre></td></tr></table></figure><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cost = [2,4,6,2,4,6,4,4,4], target = 5</span><br><span class="line">输出：&quot;0&quot;</span><br><span class="line">解释：总成本是 target 的条件下，无法生成任何整数。</span><br></pre></td></tr></table></figure><h4 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a><strong>示例 4：</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：cost = [6,10,15,40,40,40,40,40,40], target = 47</span><br><span class="line">输出：&quot;32211&quot;</span><br></pre></td></tr></table></figure><h4 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cost.length == 9</span><br><span class="line">1 &lt;= cost[i] &lt;= 5000</span><br><span class="line">1 &lt;= target &lt;= 5000</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>要求输出最大的整数：首先根据长度比较，长度较长的数较大；其次数字长度相同，从高位到地位依次比较。</p><h5 id="dp-贪心输出方案"><a href="#dp-贪心输出方案" class="headerlink" title="dp+贪心输出方案"></a>dp+贪心输出方案</h5><p>$f[i][j]$：从前$i$个数中选，每个数可以取无数次，代价（类比完全背包中的体积）为$j$的取法中，取得的物品数（数字位数）最多是多少。</p><p>输出方案时按从$9-1$的次序输出，参考完全背包中输出方案的写法。</p><p><a href="https://zhuanlan.zhihu.com/p/139368825">https://zhuanlan.zhihu.com/p/139368825</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">10</span>][<span class="number">5001</span>];</span><br><span class="line">    <span class="function">string <span class="title">largestNumber</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cost, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将cost看成体积，体积恰好为target的情况下取得的物品数最多是多少。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=target;j++)&#123;</span><br><span class="line">                f[i][j]=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=target;j++)&#123;</span><br><span class="line">                f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=cost[i<span class="number">-1</span>])&#123;</span><br><span class="line">                    f[i][j]=<span class="built_in">max</span>(f[i][j],f[i][j-cost[i<span class="number">-1</span>]]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// f[9][target]:总成本为target，最多取多少个数。</span></span><br><span class="line">        <span class="keyword">if</span>(f[<span class="number">9</span>][target]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> t=target;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(t&gt;=cost[i<span class="number">-1</span>]&amp;&amp;f[i][t]==f[i][t-cost[i<span class="number">-1</span>]]+<span class="number">1</span>)&#123;</span><br><span class="line">                ans+=<span class="string">&#x27;0&#x27;</span>+i;</span><br><span class="line">                t-=cost[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="优化空间"><a href="#优化空间" class="headerlink" title="优化空间"></a>优化空间</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">5001</span>];</span><br><span class="line">    <span class="function">string <span class="title">largestNumber</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cost, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将cost看成体积，体积恰好为target的情况下取得的物品数最多是多少。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=target;j++)&#123;</span><br><span class="line">             f[j]=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=cost[i<span class="number">-1</span>];j&lt;=target;j++)&#123;</span><br><span class="line">                f[j]=<span class="built_in">max</span>(f[j],f[j-cost[i<span class="number">-1</span>]]+<span class="number">1</span>);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f[target]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> t=target;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(t&gt;=cost[i<span class="number">-1</span>]&amp;&amp;f[t]==f[t-cost[i<span class="number">-1</span>]]+<span class="number">1</span>)&#123;</span><br><span class="line">                ans+=<span class="string">&#x27;0&#x27;</span>+i;</span><br><span class="line">                t-=cost[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O(9*target)$，空间复杂度$O(target)$。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.12 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/&quot;&gt;https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="dp" scheme="https://benyang0506.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>完全平方数</title>
    <link href="https://benyang0506.github.io/2021/06/15/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    <id>https://benyang0506.github.io/2021/06/15/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</id>
    <published>2021-06-15T05:55:52.000Z</published>
    <updated>2021-06-15T08:12:08.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.11 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/perfect-squares/">https://leetcode-cn.com/problems/perfect-squares/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给定正整数 <em>n</em>，找到若干个完全平方数（比如 <code>1, 4, 9, 16, ...</code>）使得它们的和等于 <em>n</em>。你需要让组成和的完全平方数的个数最少。</p><p>给你一个整数 <code>n</code> ，返回和为 <code>n</code> 的完全平方数的 <strong>最少数量</strong> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 12</span><br><span class="line">输出：3 </span><br><span class="line">解释：12 = 4 + 4 + 4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：2</span><br><span class="line">解释：13 = 4 + 9</span><br></pre></td></tr></table></figure><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= n &lt;= 1e4</span><br></pre></td></tr></table></figure><h4 id="lc题解"><a href="#lc题解" class="headerlink" title="lc题解"></a>lc题解</h4><p>$f[i]$表示至少需要多少个完全平方数来组成$i$，假设$j$是组成$i$的其中一个完全平方数，则$f[i]=f[i-j^2]+1$，形成递推关系，每次只需要从完全平方数中找$f[i-j^2]$较小的即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// f[i]：和为i的完全平方数的最少数量</span></span><br><span class="line">        <span class="comment">// f[i]=f[i-j^2]+1; //j为其中一个组成i的完全平方数</span></span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">10001</span>];</span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="built_in">sqrt</span>(i);j++)&#123;</span><br><span class="line">                f[i]=<span class="built_in">min</span>(f[i],f[i-j*j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>将题意转化为：用给定数组中的数来组成$n$，每个数可以取无数次，求最少需要多少个数。</p><p>裸的完全背包，需要注意的是求$min$而不是$max$，用给定的完全平方数恰好组成$n$，而不是不超过$n$，（$n$就相当于完全背包中的体积）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// f[i][j]：只考虑前i个数，恰好组成j，取得最少的数量</span></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">101</span>][<span class="number">10001</span>]; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                f[i][j]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//和为n，用给定数组中的数来凑，每个数可以取无数次（完全背包），求取得最少数量。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="comment">// for(int k=0;k*i*i&lt;=j;k++)&#123;</span></span><br><span class="line">                <span class="comment">//     f[i][j]=min(f[i][j],f[i-1][j-k*i*i]+k);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=i*i)&#123;</span><br><span class="line">                    f[i][j]=<span class="built_in">min</span>(f[i][j],f[i][j-i*i]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n)][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>优化空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// f[i][j]：只考虑前i个数，恰好组成j，取得最少的数量</span></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">10001</span>]; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//和为n，用给定数组中的数来凑，每个数可以取无数次（完全背包），求取得最少数量。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;=n;j++)&#123;</span><br><span class="line">                 f[j]=<span class="built_in">min</span>(f[j],f[j-i*i]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O(n*sqrt(n))$，空间复杂度$O(n)$。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.11 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/perfect-squares/&quot;&gt;https://leetcode-cn.com/problems/perfect-squares/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="dp" scheme="https://benyang0506.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>零钱兑换II</title>
    <link href="https://benyang0506.github.io/2021/06/11/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II/"/>
    <id>https://benyang0506.github.io/2021/06/11/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II/</id>
    <published>2021-06-11T07:55:41.000Z</published>
    <updated>2021-06-11T08:39:12.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.10 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/coin-change-2/">https://leetcode-cn.com/problems/coin-change-2/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给你一个整数数组 <code>coins</code> 表示不同面额的硬币，另给一个整数 <code>amount</code> 表示总金额。</p><p>请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 <code>0</code> 。</p><p>假设每一种面额的硬币有无限个。 </p><p>题目数据保证结果符合 32 位带符号整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：amount = <span class="number">5</span>, coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：有四种方式可以凑成总金额：</span><br><span class="line"><span class="number">5</span>=<span class="number">5</span></span><br><span class="line"><span class="number">5</span>=<span class="number">2</span>+<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="number">5</span>=<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">5</span>=<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：amount = <span class="number">3</span>, coins = [<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：只用面额 <span class="number">2</span> 的硬币不能凑成总金额 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：amount = <span class="number">10</span>, coins = [<span class="number">10</span>] </span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= coins.length &lt;= 300</span><br><span class="line">1 &lt;= coins[i] &lt;= 5000</span><br><span class="line">coins 中的所有值互不相同</span><br><span class="line">0 &lt;= amount &lt;= 5000</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, vector&lt;<span class="keyword">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp[i][j]:只用前i种硬币，恰好能组成j的方法种数</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=coins.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=amount;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k*coins[i<span class="number">-1</span>]&lt;=j;k++)&#123;</span><br><span class="line">                    dp[i][j]+=dp[i<span class="number">-1</span>][j-k*coins[i<span class="number">-1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[coins.<span class="built_in">size</span>()][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度<code>O(n*amount*amount)</code>，空间复杂度​<code>O(n*amount)​</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, vector&lt;<span class="keyword">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp[i][j]:只用前i种硬币，恰好能组成j的方法种数</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=coins.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=amount;j++)&#123;</span><br><span class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=coins[i<span class="number">-1</span>])&#123;</span><br><span class="line">                    dp[i][j]+=dp[i][j-coins[i<span class="number">-1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[coins.<span class="built_in">size</span>()][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度<code>O(n*amount)​</code>，空间复杂度​<code>O(n*amount)​</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int dp[5001];</span><br><span class="line">    int change(int amount, vector&lt;int&gt;&amp; coins) &#123;</span><br><span class="line">        // dp[i][j]:只用前i种硬币，恰好能组成j的方法种数</span><br><span class="line">        dp[0]=1;</span><br><span class="line">        for(int i=1;i&lt;=coins.size();i++)&#123;</span><br><span class="line">            for(int j=coins[i-1];j&lt;=amount;j++)&#123;</span><br><span class="line">                dp[j]=dp[j]+dp[j-coins[i-1]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度<code>O(n*amount)​</code>，空间复杂度​<code>O(amount)​</code>。</p><p>优化类似完全背包模型。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.10 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/coin-change-2/&quot;&gt;https://leetcode-cn.com/problems/coin-change-2/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="dp" scheme="https://benyang0506.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>盈利计划</title>
    <link href="https://benyang0506.github.io/2021/06/11/%E7%9B%88%E5%88%A9%E8%AE%A1%E5%88%92/"/>
    <id>https://benyang0506.github.io/2021/06/11/%E7%9B%88%E5%88%A9%E8%AE%A1%E5%88%92/</id>
    <published>2021-06-11T07:13:11.000Z</published>
    <updated>2021-06-11T07:52:02.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.9 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/profitable-schemes/">https://leetcode-cn.com/problems/profitable-schemes/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>集团里有 <code>n</code> 名员工，他们可以完成各种各样的工作创造利润。</p><p>第 <code>i</code> 种工作会产生 <code>profit[i]</code> 的利润，它要求 <code>group[i]</code> 名成员共同参与。如果成员参与了其中一项工作，就不能参与另一项工作。</p><p>工作的任何至少产生 <code>minProfit</code> 利润的子集称为 <strong>盈利计划</strong> 。并且工作的成员总数最多为 <code>n</code> 。</p><p>有多少种计划可以选择？因为答案很大，所以 <strong>返回结果模</strong> <code>10^9 + 7</code> <strong>的值</strong>。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5, minProfit = 3, group = [2,2], profit = [2,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：至少产生 3 的利润，该集团可以完成工作 0 和工作 1 ，或仅完成工作 1 。</span><br><span class="line">总的来说，有两种计划。</span><br><span class="line"></span><br><span class="line">输入：n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]</span><br><span class="line">输出：7</span><br><span class="line">解释：至少产生 5 的利润，只要完成其中一种工作就行，所以该集团可以完成任何工作。</span><br><span class="line">有 7 种可能的计划：(0)，(1)，(2)，(0,1)，(0,2)，(1,2)，以及 (0,1,2) 。</span><br></pre></td></tr></table></figure><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= n &lt;= 100</span><br><span class="line">0 &lt;= minProfit &lt;= 100</span><br><span class="line">1 &lt;= group.length &lt;= 100</span><br><span class="line">1 &lt;= group[i] &lt;= 100</span><br><span class="line">profit.length == group.length</span><br><span class="line">0 &lt;= profit[i] &lt;= 100</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>三维$dp$，考虑为什么用三维，首先考虑前$i$个员工，成员数限制（类似背包问题的体积），利润（类似背包问题价值），属性是方法种数，很自然就会想到三维。</p><p><code>f[i][j][k]: 考虑前i种工作，代价恰好为j，获得至少利润k的方法种数。</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">profitableSchemes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> minProfit, vector&lt;<span class="keyword">int</span>&gt;&amp; group, vector&lt;<span class="keyword">int</span>&gt;&amp; profit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;profit.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum+=profit[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        <span class="comment">// 需要考虑三维dp</span></span><br><span class="line">        <span class="comment">// f[i][j][k]: 考虑前i种工作，代价恰好为j，获得至少利润k的方法种数。</span></span><br><span class="line">        <span class="comment">// 时间复杂度：100*100*100=1e6</span></span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=group.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=minProfit;k++)&#123;</span><br><span class="line">                    f[i][j][k]=f[i<span class="number">-1</span>][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=group[i<span class="number">-1</span>])&#123;</span><br><span class="line">                        f[i][j][k]=(f[i][j][k]+f[i<span class="number">-1</span>][j-group[i<span class="number">-1</span>]][<span class="built_in">max</span>(<span class="number">0</span>,k-profit[i<span class="number">-1</span>])])%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            count=(count+f[group.<span class="built_in">size</span>()][i][minProfit])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>f[i][j][k]=(f[i][j][k]+f[i-1][j-group[i-1]][max(0,k-profit[i-1])])%mod;</code>当中<code>max(0,k-profit[i-1])</code>其实相当于</p><p><code>if((k-profit[i-1])&gt;=0)</code>，<code>f[i][j][k]=(f[i][j][k]+f[i-1][j-group[i-1]][k-profit[i-1]])%mod;</code></p><p><code>else</code>，<code>f[i][j][k]=(f[i][j][k]+f[i-1][j-group[i-1]][0])%mod;</code></p><p>另一种写法：</p><p><code>f[i][j][k]: 考虑前i种工作，代价至多为j，获得至少利润k的方法种数。</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">profitableSchemes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> minProfit, vector&lt;<span class="keyword">int</span>&gt;&amp; group, vector&lt;<span class="keyword">int</span>&gt;&amp; profit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;profit.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum+=profit[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        <span class="comment">// 需要考虑三维dp</span></span><br><span class="line">        <span class="comment">// f[i][j][k]: 考虑前i种工作，代价至多为j，获得至少利润k的方法种数。</span></span><br><span class="line">        <span class="comment">// 时间复杂度：100*100*100=1e6</span></span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">        <span class="comment">// f[0][0][0]=1;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=group.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                f[i][j][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=group.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=minProfit;k++)&#123;</span><br><span class="line">                    f[i][j][k]=f[i<span class="number">-1</span>][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=group[i<span class="number">-1</span>])&#123;</span><br><span class="line">                        f[i][j][k]=(f[i][j][k]+f[i<span class="number">-1</span>][j-group[i<span class="number">-1</span>]][<span class="built_in">max</span>(<span class="number">0</span>,k-profit[i<span class="number">-1</span>])])%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[group.<span class="built_in">size</span>()][n][minProfit]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>$dp$数组要根据具体意义来初始化。</p><p>还可以优化到二维，类似01背包。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.9 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/profitable-schemes/&quot;&gt;https://leetcode-cn.com/problems/profitable-schemes/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="dp" scheme="https://benyang0506.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>最后一块石头的重量II</title>
    <link href="https://benyang0506.github.io/2021/06/11/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII/"/>
    <id>https://benyang0506.github.io/2021/06/11/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII/</id>
    <published>2021-06-11T05:25:36.000Z</published>
    <updated>2021-06-11T07:10:39.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.8 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/last-stone-weight-ii/">https://leetcode-cn.com/problems/last-stone-weight-ii/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>有一堆石头，用整数数组 <code>stones</code> 表示。其中 <code>stones[i]</code> 表示第 <code>i</code> 块石头的重量。</p><p>每一回合，从中选出<strong>任意两块石头</strong>，然后将它们一起粉碎。假设石头的重量分别为 <code>x</code> 和 <code>y</code>，且 <code>x &lt;= y</code>。那么粉碎的可能结果如下：</p><ul><li>如果 <code>x == y</code>，那么两块石头都会被完全粉碎；</li><li>如果 <code>x != y</code>，那么重量为 <code>x</code> 的石头将会完全粉碎，而重量为 <code>y</code> 的石头新重量为 <code>y-x</code>。</li></ul><p>最后，<strong>最多只会剩下一块</strong> 石头。返回此石头 <strong>最小的可能重量</strong> 。如果没有石头剩下，就返回 <code>0</code>。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [2,7,4,1,8,1]</span><br><span class="line">输出：1</span><br><span class="line">解释：</span><br><span class="line">组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，</span><br><span class="line">组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，</span><br><span class="line">组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，</span><br><span class="line">组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [31,26,33,21,40]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [1,2]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= stones.length &lt;= 30</span><br><span class="line">1 &lt;= stones[i] &lt;= 100</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>思考对于粉碎的两个石头，粉碎后的石头重量为$stones[i]-stones[j]$，用这个石头与$stones[k]$来粉碎，假设$stones[k]&gt;(stones[i]-stones[j])$，粉碎后的结果为$stones[k]-stones[i]+stones[j]$。</p><p>粉碎的本质就是给$stones$数组中每个数前面加<code>+</code> 和<code>-</code>。</p><h6 id="题意转化为给-stones-数组中每个数前面加-和-，使得最后结果的绝对值最小。"><a href="#题意转化为给-stones-数组中每个数前面加-和-，使得最后结果的绝对值最小。" class="headerlink" title="题意转化为给$stones$数组中每个数前面加+ 和-，使得最后结果的绝对值最小。"></a>题意转化为给$stones$数组中每个数前面加<code>+</code> 和<code>-</code>，使得最后结果的绝对值最小。</h6><p>记$stones$数组的和为$sum$，前面加<code>-</code>的数字的和为$neg$，$ans=sum-2*neg$，要使$ans$绝对值小，即$neg$取小于等于$sum/2$的最大的值。</p><h6 id="题意转化为从-stones-数组中找若干个数，使得若干个数的和（代价，类似01背包中的体积）在满足不超过-sum-2-的条件下最大。"><a href="#题意转化为从-stones-数组中找若干个数，使得若干个数的和（代价，类似01背包中的体积）在满足不超过-sum-2-的条件下最大。" class="headerlink" title="题意转化为从$stones$数组中找若干个数，使得若干个数的和（代价，类似01背包中的体积）在满足不超过$sum/2$的条件下最大。"></a>题意转化为从$stones$数组中找若干个数，使得若干个数的和（代价，类似01背包中的体积）在满足不超过$sum/2$的条件下最大。</h6><p>到这就是裸的01背包。</p><p>有几种dp的写法：</p><h5 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h5><p>状态表示：</p><p><code>dp[i][j]</code></p><p>集合：从前$i$个数中取，代价（和）不超过$j$的取法。</p><p>属性：和的最大值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">30001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum+=stones[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=sum/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=ans;j&gt;=stones[i<span class="number">-1</span>];j--)&#123;</span><br><span class="line">                    dp[j]=<span class="built_in">max</span>(dp[j],dp[j-stones[i<span class="number">-1</span>]]+stones[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum<span class="number">-2</span>*dp[ans];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><p>状态表示：</p><p><code>dp[i][j]</code></p><p>集合：从前$i$个数中取，得到总和为$j$的取法。</p><p>属性：数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum+=stones[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=sum/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// f[i][j]:从前i个石头选，得到总和为j的方法的种数。</span></span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">31</span>][<span class="number">1501</span>];</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=ans;j++)&#123;</span><br><span class="line">                f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=stones[i<span class="number">-1</span>])&#123;</span><br><span class="line">                    f[i][j]=f[i][j]+f[i<span class="number">-1</span>][j-stones[i<span class="number">-1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> neg=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ans;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[stones.<span class="built_in">size</span>()][i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                neg=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum<span class="number">-2</span>*neg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h5><p>状态表示：</p><p><code>dp[i][j]</code></p><p>集合：从前$i$个数中取，得到总和为$j$的取法。</p><p>属性：0或1代表是否能够有这种取法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">30001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum+=stones[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">int</span> tmp=sum/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//f[i][j]表示是否可以用前i个数组成j，只有0，1两种情况</span></span><br><span class="line">        <span class="comment">//优化为一维</span></span><br><span class="line">        <span class="comment">// int f[30001];</span></span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=tmp;j&gt;=stones[i<span class="number">-1</span>];j--)&#123;</span><br><span class="line">                    f[j]=<span class="built_in">max</span>(f[j],f[j-stones[i<span class="number">-1</span>]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=tmp;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> sum<span class="number">-2</span>*i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.8 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/last-stone-weight-ii/&quot;&gt;https://leetcode-cn.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="dp" scheme="https://benyang0506.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>目标和</title>
    <link href="https://benyang0506.github.io/2021/06/11/%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
    <id>https://benyang0506.github.io/2021/06/11/%E7%9B%AE%E6%A0%87%E5%92%8C/</id>
    <published>2021-06-11T02:42:43.000Z</published>
    <updated>2021-06-15T06:02:27.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.7 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/target-sum/">https://leetcode-cn.com/problems/target-sum/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>向数组中的每个整数前添加 <code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p><ul><li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>&#39;+&#39;</code> ，在 <code>1</code> 之前添加 <code>&#39;-&#39;</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code> 。</li></ul><p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,1,1], target = 3</span><br><span class="line">输出：5</span><br><span class="line">解释：一共有 5 种方法让最终目标和为 3 。</span><br><span class="line">-1 + 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 - 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 - 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 - 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 + 1 - 1 = 3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1], target = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h5 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= nums.length &lt;= 20</span><br><span class="line">0 &lt;= nums[i] &lt;= 1000</span><br><span class="line">0 &lt;= sum(nums[i]) &lt;= 1000</span><br><span class="line">-1000 &lt;= target &lt;= 1000</span><br></pre></td></tr></table></figure><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">2</span>]=&#123;<span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(k==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            sum=sum+nums[k]*a[i];</span><br><span class="line">            <span class="built_in">dfs</span>(k+<span class="number">1</span>, nums, target, sum);</span><br><span class="line">            sum=sum-nums[k]*a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, nums, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(2^n)$，每次在倒数几个测试点TLE，应该是<code>sum=sum+nums[k]*a[i]</code>这被卡常了?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// int a[2]=&#123;-1, 1&#125;;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(k+<span class="number">1</span>, nums, target, sum-nums[k]);</span><br><span class="line">        <span class="built_in">dfs</span>(k+<span class="number">1</span>, nums, target, sum+nums[k]);</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;2;i++)&#123;</span></span><br><span class="line">        <span class="comment">//     sum=sum+nums[k]*a[i];</span></span><br><span class="line">        <span class="comment">//     dfs(k+1, nums, target, sum);</span></span><br><span class="line">        <span class="comment">//     sum=sum-nums[k]*a[i];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, nums, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(2^n)$</p><p>空间复杂度$O(n)$</p><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><h5 id="将题目转化为-dp-题"><a href="#将题目转化为-dp-题" class="headerlink" title="将题目转化为$dp$题"></a>将题目转化为$dp$题</h5><p>记$nums$数组总和为$sum$，每给一个$nums[k]$前加<code>&#39;-&#39;</code>，表达式的值$ans=sum-2<em>nums[k]$，假设所有加<code>&#39;-&#39;</code>的数字的和为$neg$，$ans=sum-2</em>neg$，$ans==target$时满足条件。</p><p>反过来，从$nums$中找若干个数，和为$(sum-target)/2$，使其前面加<code>&#39;-&#39;</code>，即可满足条件。</p><p>$(sum-target)mod2!=0$时，不符合条件。</p><p>$(sum-target)&lt;0$时，由于<code>0 &lt;= nums[i]</code>，从中找不到若干个数，使其和为$(sum-target)/2$，不符合条件。</p><h5 id="现在的问题变为，从-nums-中取若干数，使其和为-sum-target-2-，求方法数。"><a href="#现在的问题变为，从-nums-中取若干数，使其和为-sum-target-2-，求方法数。" class="headerlink" title="现在的问题变为，从$nums$中取若干数，使其和为$(sum-target)/2$，求方法数。"></a>现在的问题变为，从$nums$中取若干数，使其和为$(sum-target)/2$，求方法数。</h5><h6 id="状态表示"><a href="#状态表示" class="headerlink" title="状态表示"></a>状态表示</h6><p><code>dp[i][j]</code></p><p>集合：从前$i$个数中选，和为$j$的选法。</p><p>属性：选法总数。</p><h6 id="状态转移"><a href="#状态转移" class="headerlink" title="状态转移"></a>状态转移</h6><p>第$i$个数选不了，即<code>nums[i]&gt;j</code>，<code>dp[i][j]=dp[i-1][j]</code>；</p><p>第$i$个数可以选，即<code>nums[i]&lt;=j</code> ，<code>dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i]]</code></p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=sum-target; <span class="comment">//必为偶数，否则配不出来。</span></span><br><span class="line">        <span class="keyword">if</span>(ans%<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//负数也凑不出来，因为num[i]都是非负数</span></span><br><span class="line">        <span class="keyword">if</span>(ans&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ans/=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">21</span>][<span class="number">2001</span>];</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=ans;j++)&#123;</span><br><span class="line">                f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&lt;=j)&#123;</span><br><span class="line">                    f[i][j]+=f[i<span class="number">-1</span>][j-nums[i<span class="number">-1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[nums.<span class="built_in">size</span>()][ans];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：$O(n*ans)$</p><p>空间复杂度：$O(n*ans)$</p><p>空间复杂度还可以优化到$O(ans)$。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.7 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/target-sum/&quot;&gt;https://leetcode-cn.com/problems/target-sum/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="dp" scheme="https://benyang0506.github.io/tags/dp/"/>
    
    <category term="dfs" scheme="https://benyang0506.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>一和零</title>
    <link href="https://benyang0506.github.io/2021/06/10/%E4%B8%80%E5%92%8C%E9%9B%B6/"/>
    <id>https://benyang0506.github.io/2021/06/10/%E4%B8%80%E5%92%8C%E9%9B%B6/</id>
    <published>2021-06-10T15:03:09.000Z</published>
    <updated>2021-06-11T02:59:31.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.6 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/ones-and-zeroes/">https://leetcode-cn.com/problems/ones-and-zeroes/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 <code>m</code> 和 <code>n</code> 。</p><p>请你找出并返回 <code>strs</code> 的最大子集的大小，该子集中 <strong>最多</strong> 有 <code>m</code> 个 <code>0</code> 和 <code>n</code> 个 <code>1</code> 。</p><p>如果 <code>x</code> 的所有元素也是 <code>y</code> 的元素，集合 <code>x</code> 是集合 <code>y</code> 的 <strong>子集</strong> 。</p><p><img src="/2021/06/10/%E4%B8%80%E5%92%8C%E9%9B%B6/Snipaste_2021-06-10_23-08-56.png" alt></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>和01背包类似，每个字符串的0和1的数量为代价，要求选尽可能多的字符串。</p><h6 id="预处理："><a href="#预处理：" class="headerlink" title="预处理："></a>预处理：</h6><p>先用两个$vector$记录每个字符串中0和1的数量。</p><h6 id="状态表示："><a href="#状态表示：" class="headerlink" title="状态表示："></a>状态表示：</h6><p><code>f[i][j][k]</code></p><p>集合：从前$i$个物品中选，0的数量不超过$j$，1的数量不超过$k$的选法。</p><p>属性：选的字符串个数的最大值。</p><h6 id="状态转移："><a href="#状态转移：" class="headerlink" title="状态转移："></a>状态转移：</h6><p>如果第$i$个字符串不可选，即<code>zero[i]&gt;j||one[i]&gt;k​</code>，转移方程​<code>f[i][j][k]=f[i-1][j][k]​</code>；</p><p>如果第$i$个字符串可选，即<code>j&gt;=zero[i-1]&amp;&amp;k&gt;=one[i-1]</code>，可以分为两种情况，选和不选。</p><p>不选：<code>f[i][j][k]=f[i-1][j][k]</code></p><p>选：<code>f[i][j][k]=f[i-1][j-zero[i]][k-one[i]]+1</code></p><p>取二者中的较大值。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">601</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 预处理每个01字符串中0和1的数量</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; one;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> z_sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> o_sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;strs[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[i][j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    z_sum++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    o_sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            zero.<span class="built_in">push_back</span>(z_sum);</span><br><span class="line">            one.<span class="built_in">push_back</span>(o_sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// f[i][j][k]:只考虑前i个01字符串、0的个数不超过j、1的个数不超过k的最大子集的大小。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=strs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                    f[i][j][k]=f[i<span class="number">-1</span>][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=zero[i<span class="number">-1</span>]&amp;&amp;k&gt;=one[i<span class="number">-1</span>])&#123;</span><br><span class="line">                        f[i][j][k]=<span class="built_in">max</span>(f[i][j][k], f[i<span class="number">-1</span>][j-zero[i<span class="number">-1</span>]][k-one[i<span class="number">-1</span>]]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot; :&quot;&lt;&lt;f[i][j][k]&lt;&lt;&quot;    &quot;;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[strs.<span class="built_in">size</span>()][m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>$l$为$strs.size()$，时间复杂度$O(l<em>m</em>n)$，空间复杂度$O(l<em>m</em>n$)，</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><code>f[i][j][k]</code>只和<code>f[i-1][j][k]</code>的状态有关，可以将$i$压缩。</p><p>每个字符串只有选和不选两种情况，类似01背包，压缩后倒序遍历，保证<code>f[i][j][k]</code>由<code>f[i-1][j][k]</code>推得而不是由<code>f[i][j][k]</code>推得。</p><h3 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 预处理每个01字符串中0和1的数量</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; one;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> z_sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> o_sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;strs[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[i][j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    z_sum++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    o_sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            zero.<span class="built_in">push_back</span>(z_sum);</span><br><span class="line">            one.<span class="built_in">push_back</span>(o_sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=strs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=zero[i<span class="number">-1</span>];j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=n;k&gt;=one[i<span class="number">-1</span>];k--)&#123;</span><br><span class="line">                    f[j][k]=<span class="built_in">max</span>(f[j][k], f[j-zero[i<span class="number">-1</span>]][k-one[i<span class="number">-1</span>]]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.6 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/ones-and-zeroes/&quot;&gt;https://leetcode-cn.com/problems/ones-and-zeroes/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="dp" scheme="https://benyang0506.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>移除链表元素</title>
    <link href="https://benyang0506.github.io/2021/06/10/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
    <id>https://benyang0506.github.io/2021/06/10/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</id>
    <published>2021-06-10T09:28:58.000Z</published>
    <updated>2021-06-10T15:00:40.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.5 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">https://leetcode-cn.com/problems/remove-linked-list-elements/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="方法一（直接删）："><a href="#方法一（直接删）：" class="headerlink" title="方法一（直接删）："></a>方法一（直接删）：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* p=head;</span><br><span class="line">        ListNode* q=head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;val==val)&#123;</span><br><span class="line">                p-&gt;next=q-&gt;next;</span><br><span class="line">                q=p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                q=q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;val==val) head=head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>删除结点需要知道被删除节点前面的节点，所以多用了一个$ListNode$。</p><h4 id="方法二（递归）："><a href="#方法二（递归）：" class="headerlink" title="方法二（递归）："></a>方法二（递归）：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        head-&gt;next=<span class="built_in">removeElements</span>(head-&gt;next, val);</span><br><span class="line">        <span class="keyword">return</span> head-&gt;val==val?head-&gt;next:head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.5 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/remove-linked-list-elements/&quot;&gt;https://leetcode-cn.com/problems/remove-linked-list-elements/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="链表" scheme="https://benyang0506.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>相交链表</title>
    <link href="https://benyang0506.github.io/2021/06/04/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>https://benyang0506.github.io/2021/06/04/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2021-06-04T02:17:08.000Z</published>
    <updated>2021-06-10T15:00:35.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.4 每日一题</p><p>传送门：<a href="&lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">&lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a>&gt;</p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>input与output看程序模板就好，看题面容易被误导，这里的交点是指地址相同，而不是值相同。</p><h4 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h4><p>因为同一条链表的结点一定不相同，所以可以用unordered_set来存结点。</p><p>然后遍历另外一条链表，去unordered_set中找是否有相同的节点存在。</p><p>unordered_set是采用哈希实现的，各种操作的时间复杂度可以看作$O(1)$。</p><p>时间复杂度$O(n1+n2)$，空间复杂度$O(n1）$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode*&gt; ust;</span><br><span class="line">        ListNode* tmp=headA;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ust.<span class="built_in">insert</span>(tmp);</span><br><span class="line">            tmp=tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp=headB;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ust.<span class="built_in">count</span>(tmp))&#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp=tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h4><p>如果两条链表其中一条为NULL，则没有交点，返回NULL；</p><p>t1指向headA的头结点，t2指向headB的头结点，t1与t2每次都向后移动一位，如果$t1-&gt;next==NULL$，则t1从headB的头结点开始遍历；如果$t2-&gt;next==NULL$，则t2从headA的头结点开始遍历。</p><p>如果t1与t2同时为NULL，则返回NULL，无交点；</p><p>如果$t1==t2$，则返回t1，t1为交点。</p><h5 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a><strong>正确性</strong></h5><p>无交点：链表A与链表B长度相同，t1与t2同时为NULL；链表A与链表B长度不同，t1与t2在把两条链表都遍历完后同时为NULL。</p><p>有交点：链表A与链表B长度相同，遍历到交点时$t1==t2 !=NULL$；链表A与链表B长度不同，t1与t2在遍历完原来的链表后在遍历另一条链表时，会同时到达交点$t1==t2=!NULL$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(headA==<span class="literal">NULL</span>||headB==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* t1=headA;</span><br><span class="line">        ListNode* t2=headB;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1==t2) <span class="keyword">return</span> t1;</span><br><span class="line">            t1=t1-&gt;next;</span><br><span class="line">            t2=t2-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="literal">NULL</span>||t2==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t1==<span class="literal">NULL</span>&amp;&amp;t2==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t1==<span class="literal">NULL</span>) t1=headB;</span><br><span class="line">                <span class="keyword">else</span> t2=headA;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.4 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;&amp;lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/&quot;&gt;&amp;lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="链表" scheme="https://benyang0506.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="哈希表" scheme="https://benyang0506.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="双指针" scheme="https://benyang0506.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>连续数组</title>
    <link href="https://benyang0506.github.io/2021/06/03/%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/"/>
    <id>https://benyang0506.github.io/2021/06/03/%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</id>
    <published>2021-06-03T02:32:09.000Z</published>
    <updated>2021-06-11T02:30:10.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.3 每日一题</p><p>传送门：<a href="&lt;https://leetcode-cn.com/problems/contiguous-array/">&lt;https://leetcode-cn.com/problems/contiguous-array/</a>&gt;</p><span id="more"></span><p><img src="/2021/06/03/%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/QQ截图20210603103228.png" alt></p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><p>遍历起点终点+前缀和，时间复杂度$O(n^2)$</p><h4 id="前缀和-哈希表"><a href="#前缀和-哈希表" class="headerlink" title="前缀和+哈希表"></a>前缀和+哈希表</h4><p>可以将数组中的0视为-1，然后可以将题意理解为找和为0的最长连续子数组。</p><p>记前缀和数组为$q[N]$，下标$i$到下标$j$的区间和为$q[j]-q[i-1]$，假如$q[i-1]$和$q[j]$的值相同，那么$(q[j]-q[i-1])$等于0，符合条件。</p><p>因此，只需要求最长的符合条件的情况，这里采用哈希表来降低时间复杂度。哈希表的$key$为前缀和，$value$为这个前缀和第一次出现的索引。</p><p>在程序中遍历一次前缀和数组，如果在哈希表中没有出现，则存入哈希表；如果出现过可以更maxn，此时不需要更新哈希表。</p><p>注意：要将前缀和为0存入前缀和的第一项。</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxLength</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//前缀和</span></span><br><span class="line">        <span class="keyword">int</span> q[<span class="number">100100</span>];</span><br><span class="line">        q[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">1</span>)&#123;</span><br><span class="line">               q[i+<span class="number">1</span>]=q[i]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               q[i+<span class="number">1</span>]=q[i]<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//哈希表</span></span><br><span class="line">        map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">        mp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tnt=q[i];</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(tnt)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                maxn=<span class="built_in">max</span>(maxn,i-mp[tnt]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mp[tnt]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.3 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;&amp;lt;https://leetcode-cn.com/problems/contiguous-array/&quot;&gt;&amp;lt;https://leetcode-cn.com/problems/contiguous-array/&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="哈希表" scheme="https://benyang0506.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="前缀和" scheme="https://benyang0506.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>连续的子数组和</title>
    <link href="https://benyang0506.github.io/2021/06/02/%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <id>https://benyang0506.github.io/2021/06/02/%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</id>
    <published>2021-06-02T02:41:51.000Z</published>
    <updated>2021-06-04T02:51:25.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.2 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/continuous-subarray-sum/">https://leetcode-cn.com/problems/continuous-subarray-sum/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><img src="/2021/06/02/%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/Snipaste_2021-06-02_10-45-02.png" alt></p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><p>枚举起点，枚举终点，计算区间和，时间复杂度$O(n^3)​$</p><p>计算区间和改用前缀和，时间复杂度$O(n^2)​$</p><h4 id="前缀和-哈希表"><a href="#前缀和-哈希表" class="headerlink" title="前缀和+哈希表"></a>前缀和+哈希表</h4><p>记前缀和数组为$q[N]$，下标$i$到下标$j$的区间和为$q[j]-q[i-1]$，假如$(q[j]-q[i-1])$为$k$的倍数。</p><p>则$q[i-1]$和$q[j]$对$k$取余的结果相同。</p><p>因此，只需要求出每一位的前缀和对$k$取余的结果就好，这里采用哈希表来降低时间复杂度。哈希表的$key$为余数，$value$为这个余数第一次出现的索引。</p><p>在程序中遍历一次前缀和数组（前缀和数组可以直接存前缀和余数），如果在哈希表中没有出现，则存入哈希表；如果出现过可以判断索引差是否大于等于2（题设要求子数组长度至少为2），此时不需要更新哈希表。</p><p>注意：要将余数为0存入前缀和的第一项，保证遍历过程中如果遇到前缀和余数为0可以返回true。</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkSubarraySum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q[(<span class="keyword">int</span>)<span class="number">1e5</span>+<span class="number">10</span>];</span><br><span class="line">        q[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            q[i+<span class="number">1</span>]=(q[i]+nums[i])%k;</span><br><span class="line">            cout&lt;&lt;q[i+<span class="number">1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">        mp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tnt=q[i];</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(tnt)==<span class="number">0</span>)&#123;</span><br><span class="line">                mp[tnt]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((i-mp[tnt])&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.2 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/continuous-subarray-sum/&quot;&gt;https://leetcode-cn.com/problems/continuous-subarray-sum/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="哈希表" scheme="https://benyang0506.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="前缀和" scheme="https://benyang0506.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>HousePrice</title>
    <link href="https://benyang0506.github.io/2021/06/01/HousePrice/"/>
    <id>https://benyang0506.github.io/2021/06/01/HousePrice/</id>
    <published>2021-06-01T08:21:04.000Z</published>
    <updated>2021-06-01T08:54:28.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、采集数据"><a href="#一、采集数据" class="headerlink" title="一、采集数据"></a>一、采集数据</h2><h3 id="1、导入数据分析数据格式"><a href="#1、导入数据分析数据格式" class="headerlink" title="1、导入数据分析数据格式"></a>1、导入数据分析数据格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_path = <span class="string">&#x27;train.csv&#x27;</span></span><br><span class="line">train_data = pd.read_csv(train_path)</span><br><span class="line">train_data = train_data.drop(<span class="string">&#x27;Id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">test_path = <span class="string">&#x27;test.csv&#x27;</span></span><br><span class="line">test_data = pd.read_csv(test_path)</span><br><span class="line">test_data = test_data.drop(<span class="string">&#x27;Id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">test_data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>MSSubClass</th>      <th>MSZoning</th>      <th>LotFrontage</th>      <th>LotArea</th>      <th>Street</th>      <th>Alley</th>      <th>LotShape</th>      <th>LandContour</th>      <th>Utilities</th>      <th>LotConfig</th>      <th>...</th>      <th>ScreenPorch</th>      <th>PoolArea</th>      <th>PoolQC</th>      <th>Fence</th>      <th>MiscFeature</th>      <th>MiscVal</th>      <th>MoSold</th>      <th>YrSold</th>      <th>SaleType</th>      <th>SaleCondition</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>20</td>      <td>RH</td>      <td>80.0</td>      <td>11622</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>120</td>      <td>0</td>      <td>NaN</td>      <td>MnPrv</td>      <td>NaN</td>      <td>0</td>      <td>6</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>1</th>      <td>20</td>      <td>RL</td>      <td>81.0</td>      <td>14267</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Corner</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>Gar2</td>      <td>12500</td>      <td>6</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>2</th>      <td>60</td>      <td>RL</td>      <td>74.0</td>      <td>13830</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>MnPrv</td>      <td>NaN</td>      <td>0</td>      <td>3</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>3</th>      <td>60</td>      <td>RL</td>      <td>78.0</td>      <td>9978</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>6</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>4</th>      <td>120</td>      <td>RL</td>      <td>43.0</td>      <td>5005</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>HLS</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>144</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>1</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1454</th>      <td>160</td>      <td>RM</td>      <td>21.0</td>      <td>1936</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>6</td>      <td>2006</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>1455</th>      <td>160</td>      <td>RM</td>      <td>21.0</td>      <td>1894</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>4</td>      <td>2006</td>      <td>WD</td>      <td>Abnorml</td>    </tr>    <tr>      <th>1456</th>      <td>20</td>      <td>RL</td>      <td>160.0</td>      <td>20000</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>9</td>      <td>2006</td>      <td>WD</td>      <td>Abnorml</td>    </tr>    <tr>      <th>1457</th>      <td>85</td>      <td>RL</td>      <td>62.0</td>      <td>10441</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>MnPrv</td>      <td>Shed</td>      <td>700</td>      <td>7</td>      <td>2006</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>1458</th>      <td>60</td>      <td>RL</td>      <td>74.0</td>      <td>9627</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>11</td>      <td>2006</td>      <td>WD</td>      <td>Normal</td>    </tr>  </tbody></table><p>1459 rows × 79 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp3 =train_data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"><span class="comment"># tmp3</span></span><br><span class="line">tmp3[tmp3&gt;<span class="number">0</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PoolQC          1453</span><br><span class="line">MiscFeature     1406</span><br><span class="line">Alley           1369</span><br><span class="line">Fence           1179</span><br><span class="line">FireplaceQu      690</span><br><span class="line">LotFrontage      259</span><br><span class="line">GarageYrBlt       81</span><br><span class="line">GarageType        81</span><br><span class="line">GarageFinish      81</span><br><span class="line">GarageQual        81</span><br><span class="line">GarageCond        81</span><br><span class="line">BsmtFinType2      38</span><br><span class="line">BsmtExposure      38</span><br><span class="line">BsmtFinType1      37</span><br><span class="line">BsmtCond          37</span><br><span class="line">BsmtQual          37</span><br><span class="line">MasVnrArea         8</span><br><span class="line">MasVnrType         8</span><br><span class="line">Electrical         1</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="2、理解数据"><a href="#2、理解数据" class="headerlink" title="2、理解数据"></a>2、理解数据</h3><hr><p><img src="/2021/06/01/HousePrice/data_us1.png" alt></p><p><img src="/2021/06/01/HousePrice/data_us2.png" alt></p><h2 id="二、探索性可视化"><a href="#二、探索性可视化" class="headerlink" title="二、探索性可视化"></a>二、探索性可视化</h2><h3 id="2-1-售价"><a href="#2-1-售价" class="headerlink" title="2.1 售价"></a>2.1 售价</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">&#x27;SalePrice&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count      1460.000000</span><br><span class="line">mean     180921.195890</span><br><span class="line">std       79442.502883</span><br><span class="line">min       34900.000000</span><br><span class="line">25%      129975.000000</span><br><span class="line">50%      163000.000000</span><br><span class="line">75%      214000.000000</span><br><span class="line">max      755000.000000</span><br><span class="line">Name: SalePrice, dtype: float64</span><br></pre></td></tr></table></figure><p>通过观察，SalePrice没有无效或者非数值数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># sns.set()</span></span><br><span class="line">sns.displot(train_data[<span class="string">&#x27;SalePrice&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1ece6c52e50&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Figure size 864x576 with 0 Axes&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_9_2.png" alt></p><p>​    </p><h3 id="2-2-售价与房屋面积"><a href="#2-2-售价与房屋面积" class="headerlink" title="2.2 售价与房屋面积"></a>2.2 售价与房屋面积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># warnings.filterwarnings(&#x27;ignore&#x27;)</span></span><br><span class="line"><span class="comment"># plt.figure(figsize=(12, 8))</span></span><br><span class="line"><span class="comment"># plt.scatter(train_data[&#x27;LotArea&#x27;], train_data[&#x27;SalePrice&#x27;])</span></span><br><span class="line"><span class="comment"># plt.xlabel(&#x27;LotArea&#x27;)</span></span><br><span class="line"><span class="comment"># plt.ylabel(&#x27;SalePrice&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line">sns.relplot(<span class="string">&#x27;LotArea&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1ece819e7c0&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_11_1.png" alt="png"></p><p>​    </p><h3 id="2-3-售价与建造时间"><a href="#2-3-售价与建造时间" class="headerlink" title="2.3 售价与建造时间"></a>2.3 售价与建造时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">sns.boxplot(train_data[<span class="string">&#x27;YearBuilt&#x27;</span>], train_data[<span class="string">&#x27;SalePrice&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_13_0.png" alt="png"></p><p>​    </p><h3 id="2-4-售价与地理位置"><a href="#2-4-售价与地理位置" class="headerlink" title="2.4 售价与地理位置"></a>2.4 售价与地理位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.figure(figsize=(12, 8))</span></span><br><span class="line"><span class="comment"># sns.boxplot(train_data[&#x27;Neighborhood&#x27;], train_data[&#x27;SalePrice&#x27;])</span></span><br><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;strip&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_15_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;point&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_16_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_17_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_18_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># g = sns.catplot(&#x27;Neighborhood&#x27;, &#x27;SalePrice&#x27;, data=train_data, kind=&#x27;violin&#x27;)</span></span><br><span class="line"><span class="comment"># g.fig.set_size_inches(12, 8)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure><h3 id="2-5-售价与装修评级"><a href="#2-5-售价与装修评级" class="headerlink" title="2.5 售价与装修评级"></a>2.5 售价与装修评级</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;OverallQual&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_21_0.png" alt="png"></p><p>​    </p><h2 id="三、特征提取"><a href="#三、特征提取" class="headerlink" title="三、特征提取"></a>三、特征提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">corrmat = train_data.corr()</span><br><span class="line">sns.heatmap(corrmat, annot=<span class="literal">False</span>, vmax=<span class="number">1</span>, vmin=-<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br><span class="line">corrmat[<span class="string">&#x27;SalePrice&#x27;</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_23_0.png" alt="png"></p><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">SalePrice        1.000000</span><br><span class="line">OverallQual      0.790982</span><br><span class="line">GrLivArea        0.708624</span><br><span class="line">GarageCars       0.640409</span><br><span class="line">GarageArea       0.623431</span><br><span class="line">TotalBsmtSF      0.613581</span><br><span class="line">1stFlrSF         0.605852</span><br><span class="line">FullBath         0.560664</span><br><span class="line">TotRmsAbvGrd     0.533723</span><br><span class="line">YearBuilt        0.522897</span><br><span class="line">YearRemodAdd     0.507101</span><br><span class="line">GarageYrBlt      0.486362</span><br><span class="line">MasVnrArea       0.477493</span><br><span class="line">Fireplaces       0.466929</span><br><span class="line">BsmtFinSF1       0.386420</span><br><span class="line">LotFrontage      0.351799</span><br><span class="line">WoodDeckSF       0.324413</span><br><span class="line">2ndFlrSF         0.319334</span><br><span class="line">OpenPorchSF      0.315856</span><br><span class="line">HalfBath         0.284108</span><br><span class="line">LotArea          0.263843</span><br><span class="line">BsmtFullBath     0.227122</span><br><span class="line">BsmtUnfSF        0.214479</span><br><span class="line">BedroomAbvGr     0.168213</span><br><span class="line">ScreenPorch      0.111447</span><br><span class="line">PoolArea         0.092404</span><br><span class="line">MoSold           0.046432</span><br><span class="line">3SsnPorch        0.044584</span><br><span class="line">BsmtFinSF2      -0.011378</span><br><span class="line">BsmtHalfBath    -0.016844</span><br><span class="line">MiscVal         -0.021190</span><br><span class="line">LowQualFinSF    -0.025606</span><br><span class="line">YrSold          -0.028923</span><br><span class="line">OverallCond     -0.077856</span><br><span class="line">MSSubClass      -0.084284</span><br><span class="line">EnclosedPorch   -0.128578</span><br><span class="line">KitchenAbvGr    -0.135907</span><br><span class="line">Name: SalePrice, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">SPcorrmat = train_data.corr()[<span class="string">u&#x27;SalePrice&#x27;</span>]</span><br><span class="line">SPcorrmat = SPcorrmat.sort_values(key=<span class="built_in">abs</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 和上面取出的结果一样</span></span><br><span class="line">plt.plot(SPcorrmat.head(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x1ecf2abffa0&gt;]</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_24_1.png" alt="png"></p><p>​    </p><p>取与SalePrice相关性较大的几个特征，暂时先取6个。<br>OverallQual、GrLivArea、GarageCars、GarageArea、TotalBsmtSF、1stFlrSF</p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;extracted_data.csv&#x27;</span></span><br><span class="line">data = pd.read_csv(path)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>OverallQual</th>      <th>GrLivArea</th>      <th>GarageCars</th>      <th>GarageArea</th>      <th>TotalBsmtSF</th>      <th>1stFlrSF</th>      <th>SalePrice</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7</td>      <td>1710</td>      <td>2</td>      <td>548</td>      <td>856</td>      <td>856</td>      <td>208500</td>    </tr>    <tr>      <th>1</th>      <td>6</td>      <td>1262</td>      <td>2</td>      <td>460</td>      <td>1262</td>      <td>1262</td>      <td>181500</td>    </tr>    <tr>      <th>2</th>      <td>7</td>      <td>1786</td>      <td>2</td>      <td>608</td>      <td>920</td>      <td>920</td>      <td>223500</td>    </tr>    <tr>      <th>3</th>      <td>7</td>      <td>1717</td>      <td>3</td>      <td>642</td>      <td>756</td>      <td>961</td>      <td>140000</td>    </tr>    <tr>      <th>4</th>      <td>8</td>      <td>2198</td>      <td>3</td>      <td>836</td>      <td>1145</td>      <td>1145</td>      <td>250000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1455</th>      <td>6</td>      <td>1647</td>      <td>2</td>      <td>460</td>      <td>953</td>      <td>953</td>      <td>175000</td>    </tr>    <tr>      <th>1456</th>      <td>6</td>      <td>2073</td>      <td>2</td>      <td>500</td>      <td>1542</td>      <td>2073</td>      <td>210000</td>    </tr>    <tr>      <th>1457</th>      <td>7</td>      <td>2340</td>      <td>1</td>      <td>252</td>      <td>1152</td>      <td>1188</td>      <td>266500</td>    </tr>    <tr>      <th>1458</th>      <td>5</td>      <td>1078</td>      <td>1</td>      <td>240</td>      <td>1078</td>      <td>1078</td>      <td>142125</td>    </tr>    <tr>      <th>1459</th>      <td>5</td>      <td>1256</td>      <td>1</td>      <td>276</td>      <td>1256</td>      <td>1256</td>      <td>147500</td>    </tr>  </tbody></table><p>1460 rows × 7 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp = data.isnull().<span class="built_in">sum</span>()</span><br><span class="line">tmp</span><br><span class="line"><span class="comment"># tmp[tmp&gt;0].sort_values(ascending=False)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OverallQual    0</span><br><span class="line">GrLivArea      0</span><br><span class="line">GarageCars     0</span><br><span class="line">GarageArea     0</span><br><span class="line">TotalBsmtSF    0</span><br><span class="line">1stFlrSF       0</span><br><span class="line">SalePrice      0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="特征归一化"><a href="#特征归一化" class="headerlink" title="特征归一化"></a>特征归一化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sp = data.iloc[:, -<span class="number">1</span>]</span><br><span class="line">data = (data - data.mean()) / data.std()</span><br><span class="line">data[<span class="string">&#x27;SalePrice&#x27;</span>] = sp</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>OverallQual</th>      <th>GrLivArea</th>      <th>GarageCars</th>      <th>GarageArea</th>      <th>TotalBsmtSF</th>      <th>1stFlrSF</th>      <th>SalePrice</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.651256</td>      <td>0.370207</td>      <td>0.311618</td>      <td>0.350880</td>      <td>-0.459145</td>      <td>-0.793162</td>      <td>208500</td>    </tr>    <tr>      <th>1</th>      <td>-0.071812</td>      <td>-0.482347</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>0.466305</td>      <td>0.257052</td>      <td>181500</td>    </tr>    <tr>      <th>2</th>      <td>0.651256</td>      <td>0.514836</td>      <td>0.311618</td>      <td>0.631510</td>      <td>-0.313261</td>      <td>-0.627611</td>      <td>223500</td>    </tr>    <tr>      <th>3</th>      <td>0.651256</td>      <td>0.383528</td>      <td>1.649742</td>      <td>0.790533</td>      <td>-0.687089</td>      <td>-0.521555</td>      <td>140000</td>    </tr>    <tr>      <th>4</th>      <td>1.374324</td>      <td>1.298881</td>      <td>1.649742</td>      <td>1.697903</td>      <td>0.199611</td>      <td>-0.045596</td>      <td>250000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1455</th>      <td>-0.071812</td>      <td>0.250316</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>-0.238040</td>      <td>-0.542249</td>      <td>175000</td>    </tr>    <tr>      <th>1456</th>      <td>-0.071812</td>      <td>1.061003</td>      <td>0.311618</td>      <td>0.126376</td>      <td>1.104547</td>      <td>2.354894</td>      <td>210000</td>    </tr>    <tr>      <th>1457</th>      <td>0.651256</td>      <td>1.569110</td>      <td>-1.026506</td>      <td>-1.033560</td>      <td>0.215567</td>      <td>0.065634</td>      <td>266500</td>    </tr>    <tr>      <th>1458</th>      <td>-0.794879</td>      <td>-0.832502</td>      <td>-1.026506</td>      <td>-1.089686</td>      <td>0.046889</td>      <td>-0.218907</td>      <td>142125</td>    </tr>    <tr>      <th>1459</th>      <td>-0.794879</td>      <td>-0.493765</td>      <td>-1.026506</td>      <td>-0.921308</td>      <td>0.452629</td>      <td>0.241532</td>      <td>147500</td>    </tr>  </tbody></table><p>1460 rows × 7 columns</p></div><h2 id="四、多变量线性回归模型"><a href="#四、多变量线性回归模型" class="headerlink" title="四、多变量线性回归模型"></a>四、多变量线性回归模型</h2><h3 id="4-1-数据预处理"><a href="#4-1-数据预处理" class="headerlink" title="4.1 数据预处理"></a>4.1 数据预处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ones</th>      <th>OverallQual</th>      <th>GrLivArea</th>      <th>GarageCars</th>      <th>GarageArea</th>      <th>TotalBsmtSF</th>      <th>1stFlrSF</th>      <th>SalePrice</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0.651256</td>      <td>0.370207</td>      <td>0.311618</td>      <td>0.350880</td>      <td>-0.459145</td>      <td>-0.793162</td>      <td>208500</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>-0.071812</td>      <td>-0.482347</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>0.466305</td>      <td>0.257052</td>      <td>181500</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0.651256</td>      <td>0.514836</td>      <td>0.311618</td>      <td>0.631510</td>      <td>-0.313261</td>      <td>-0.627611</td>      <td>223500</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>0.651256</td>      <td>0.383528</td>      <td>1.649742</td>      <td>0.790533</td>      <td>-0.687089</td>      <td>-0.521555</td>      <td>140000</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>1.374324</td>      <td>1.298881</td>      <td>1.649742</td>      <td>1.697903</td>      <td>0.199611</td>      <td>-0.045596</td>      <td>250000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1455</th>      <td>1</td>      <td>-0.071812</td>      <td>0.250316</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>-0.238040</td>      <td>-0.542249</td>      <td>175000</td>    </tr>    <tr>      <th>1456</th>      <td>1</td>      <td>-0.071812</td>      <td>1.061003</td>      <td>0.311618</td>      <td>0.126376</td>      <td>1.104547</td>      <td>2.354894</td>      <td>210000</td>    </tr>    <tr>      <th>1457</th>      <td>1</td>      <td>0.651256</td>      <td>1.569110</td>      <td>-1.026506</td>      <td>-1.033560</td>      <td>0.215567</td>      <td>0.065634</td>      <td>266500</td>    </tr>    <tr>      <th>1458</th>      <td>1</td>      <td>-0.794879</td>      <td>-0.832502</td>      <td>-1.026506</td>      <td>-1.089686</td>      <td>0.046889</td>      <td>-0.218907</td>      <td>142125</td>    </tr>    <tr>      <th>1459</th>      <td>1</td>      <td>-0.794879</td>      <td>-0.493765</td>      <td>-1.026506</td>      <td>-0.921308</td>      <td>0.452629</td>      <td>0.241532</td>      <td>147500</td>    </tr>  </tbody></table><p>1460 rows × 8 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cols = data.shape[<span class="number">1</span>]</span><br><span class="line">x = data.iloc[:, <span class="number">0</span>:cols-<span class="number">1</span>]</span><br><span class="line">y = data.iloc[:, cols-<span class="number">1</span>:cols]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.matrix(x.values)</span><br><span class="line">y = np.matrix(y.values)</span><br><span class="line">theta = np.matrix(np.zeros(x.shape[<span class="number">1</span>]))</span><br><span class="line">theta</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix([[0., 0., 0., 0., 0., 0., 0.]])</span><br></pre></td></tr></table></figure><h3 id="4-2-线性回归"><a href="#4-2-线性回归" class="headerlink" title="4.2 线性回归"></a>4.2 线性回归</h3><h4 id="计算损失函数"><a href="#计算损失函数" class="headerlink" title="计算损失函数"></a>计算损失函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span>(<span class="params">X, y, theta</span>):</span></span><br><span class="line">    inner = np.power((X * theta.T - y), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.<span class="built_in">sum</span>(inner) / (<span class="number">2</span> * <span class="built_in">len</span>(X)))</span><br></pre></td></tr></table></figure><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span>(<span class="params">x, y, theta, alpha, iters</span>):</span></span><br><span class="line"><span class="comment">#     存theta的向量</span></span><br><span class="line">    temp = np.matrix(np.zeros(theta.shape))</span><br><span class="line"><span class="comment">#     参数（特征）数量</span></span><br><span class="line">    parameters = <span class="built_in">int</span>(theta.ravel().shape[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#     每一代的代价</span></span><br><span class="line">    cost = np.zeros(iters)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        error = (x * theta.T) - y</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(parameters):</span><br><span class="line">            term = np.multiply(error, x[:, j])</span><br><span class="line">            temp[<span class="number">0</span>, j] = theta[<span class="number">0</span>, j] - ((alpha / <span class="built_in">len</span>(x)) * np.<span class="built_in">sum</span>(term))</span><br><span class="line">        </span><br><span class="line">        theta = temp</span><br><span class="line">        cost[i] = computeCost(x, y, theta)</span><br><span class="line">    <span class="keyword">return</span> theta, cost</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g1, cost1 = gradientDescent(x, y, theta, <span class="number">0.01</span>, <span class="number">1500</span>)</span><br><span class="line">g1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matrix([[180921.14457104,  33281.60801039,  22604.1908728 ,</span><br><span class="line">          10412.0350517 ,   3775.32504803,  10488.68941045,</span><br><span class="line">           4493.38109433]])</span><br></pre></td></tr></table></figure><p>观察cost曲线，看看有没有收敛</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">1500</span>, <span class="number">1500</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.plot(t, cost1, label=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;iters&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/06/01/HousePrice/output_43_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([137944.88106755, 136222.15953388, 134542.47251256, ...,</span><br><span class="line">        27400.60027344,  27400.59914954,  27400.5980284 ])</span><br></pre></td></tr></table></figure><h2 id="五、做预测"><a href="#五、做预测" class="headerlink" title="五、做预测"></a>五、做预测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2 = test_data</span><br><span class="line">data2 = data2.loc[:, [<span class="string">&#x27;OverallQual&#x27;</span>, <span class="string">&#x27;GrLivArea&#x27;</span>, <span class="string">&#x27;GarageCars&#x27;</span>, <span class="string">&#x27;GarageArea&#x27;</span>, <span class="string">&#x27;TotalBsmtSF&#x27;</span>, <span class="string">&#x27;1stFlrSF&#x27;</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp4 = data2.isnull().<span class="built_in">sum</span>()</span><br><span class="line">tmp4[tmp4&gt;<span class="number">0</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TotalBsmtSF    1</span><br><span class="line">GarageArea     1</span><br><span class="line">GarageCars     1</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">&#x27;TotalBsmtSF&#x27;</span>, <span class="string">&#x27;GarageArea&#x27;</span>, <span class="string">&#x27;GarageCars&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">    data2[col].fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># tmp4 = data2.isnull().sum()</span></span><br><span class="line"><span class="comment"># tmp4[tmp4&gt;0].sort_values(ascending=False)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series([], dtype: int64)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data2 = (data2 - data2.mean()) / data2.std()</span><br><span class="line">data2.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cols = data2.shape[<span class="number">1</span>]</span><br><span class="line">x2 = np.matrix(data2.values)</span><br><span class="line">y2 = x2 * g1.T</span><br><span class="line">y2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix([[115885.01852303],</span><br><span class="line">        [167400.04822819],</span><br><span class="line">        [160547.77546842],</span><br><span class="line">        ...,</span><br><span class="line">        [153666.34643612],</span><br><span class="line">        [ 94793.69583206],</span><br><span class="line">        [242838.70740226]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(y2)</span><br><span class="line">tmp2 = df1.isnull().<span class="built_in">sum</span>()</span><br><span class="line">tmp2</span><br><span class="line"><span class="comment"># tmp2[tmp2&gt;0].sort_values(ascending=False)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0    0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(y2)</span><br><span class="line">names=[<span class="string">&#x27;SalePrice&#x27;</span>]</span><br><span class="line">df.columns = names</span><br><span class="line">test_data_output = pd.read_csv(test_path)</span><br><span class="line">df.insert(<span class="number">0</span>, <span class="string">&#x27;Id&#x27;</span>, test_data_output.iloc[:, <span class="number">0</span>])</span><br><span class="line">df.to_csv(<span class="string">&quot;submission2.csv&quot;</span>, index=<span class="literal">False</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="六、在kaggle上提交"><a href="#六、在kaggle上提交" class="headerlink" title="六、在kaggle上提交"></a>六、在kaggle上提交</h2><p><img src="/2021/06/01/HousePrice/submit1.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、采集数据&quot;&gt;&lt;a href=&quot;#一、采集数据&quot; class=&quot;headerlink&quot; title=&quot;一、采集数据&quot;&gt;&lt;/a&gt;一、采集数据&lt;/h2&gt;&lt;h3 id=&quot;1、导入数据分析数据格式&quot;&gt;&lt;a href=&quot;#1、导入数据分析数据格式&quot; class=&quot;headerlink&quot; title=&quot;1、导入数据分析数据格式&quot;&gt;&lt;/a&gt;1、导入数据分析数据格式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; seaborn &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; warnings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; StandardScaler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://benyang0506.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="kaggle" scheme="https://benyang0506.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/kaggle/"/>
    
    
    <category term="线性回归" scheme="https://benyang0506.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>4的幂</title>
    <link href="https://benyang0506.github.io/2021/05/31/4%E7%9A%84%E5%B9%82/"/>
    <id>https://benyang0506.github.io/2021/05/31/4%E7%9A%84%E5%B9%82/</id>
    <published>2021-05-31T01:26:44.000Z</published>
    <updated>2021-06-02T02:45:58.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>5.31 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/power-of-four/">https://leetcode-cn.com/problems/power-of-four/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><img src="/2021/05/31/4%E7%9A%84%E5%B9%82/题面.png" alt></p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">16</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">4</span>, i)==n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二进制中1的位置"><a href="#二进制中1的位置" class="headerlink" title="二进制中1的位置"></a>二进制中1的位置</h4><p>如果一个数是4的幂，那么它也一定是2的幂，判断一个数是否为2的幂，可以用x&amp;(x-1)来判断</p><p>如果一个数为2的幂，则其二进制表示含且只含1；4的幂次：1，100，10000，1000000…，其二进制表示只含有一个1，且1所在的位置在奇数位（从低位往高位看，且最低位为第1位）</p><p>最后判断唯一的一个1在奇数位还是偶数位，可以用x&amp;0x55555555来判断（0x5=0x0101可以判断奇数位上的1）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;(n<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">0x55555555</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h4><p>首先判断n是不是2的幂</p><p>如果n是4的幂，那么它模3结果为1</p><script type="math/tex; mode=display">4^n\equiv(3+1)^n\equiv1^n\equiv1\pmod n</script><p>如果n是2的幂确不是4的幂，那么n可以表示为2*4的幂，其模3结果为2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;(n<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;5.31 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/power-of-four/&quot;&gt;https://leetcode-cn.com/problems/power-of-four/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="数论" scheme="https://benyang0506.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>九龙山</title>
    <link href="https://benyang0506.github.io/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/"/>
    <id>https://benyang0506.github.io/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/</id>
    <published>2021-05-16T12:10:38.000Z</published>
    <updated>2021-05-17T01:16:50.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="九龙山"><a href="#九龙山" class="headerlink" title="九龙山"></a>九龙山</h3><p>平湖九龙山位于杭州湾出海口，想看海的朋友可以来看一下，离上海很近，人少（五一期间都没多少人），指望看到蔚蓝色的大海的朋友可能会失望了，不去后悔，去了更后悔的一个景点。</p><span id="more"></span><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/1.jpg" alt></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/2.jpg" alt="2"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/3.jpg" alt="3"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/4.jpg" alt="4"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/7.jpg" alt="7"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/5.jpg" alt="5"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/6.jpg" alt="6"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/8.jpg" alt="8"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/10.jpg" alt="9"></p><p><img src="/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/9.jpg" alt="10"></p><p>最后感谢顾总从南京驱车300km来玩，为我实习之余的生活增添了很多乐趣。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;九龙山&quot;&gt;&lt;a href=&quot;#九龙山&quot; class=&quot;headerlink&quot; title=&quot;九龙山&quot;&gt;&lt;/a&gt;九龙山&lt;/h3&gt;&lt;p&gt;平湖九龙山位于杭州湾出海口，想看海的朋友可以来看一下，离上海很近，人少（五一期间都没多少人），指望看到蔚蓝色的大海的朋友可能会失望了，不去后悔，去了更后悔的一个景点。&lt;/p&gt;</summary>
    
    
    
    <category term="Moments" scheme="https://benyang0506.github.io/categories/Moments/"/>
    
    
    <category term="sea" scheme="https://benyang0506.github.io/tags/sea/"/>
    
    <category term="浙江平湖" scheme="https://benyang0506.github.io/tags/%E6%B5%99%E6%B1%9F%E5%B9%B3%E6%B9%96/"/>
    
  </entry>
  
</feed>
