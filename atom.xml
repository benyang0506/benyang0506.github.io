<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿犇</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="https://benyang0506.github.io/atom.xml" rel="self"/>
  
  <link href="https://benyang0506.github.io/"/>
  <updated>2021-06-04T05:58:49.796Z</updated>
  <id>https://benyang0506.github.io/</id>
  
  <author>
    <name>杨犇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>相交链表</title>
    <link href="https://benyang0506.github.io/2021/06/04/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>https://benyang0506.github.io/2021/06/04/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2021-06-04T02:17:08.000Z</published>
    <updated>2021-06-04T05:58:49.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.4 每日一题</p><p>传送门：<a href="&lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">&lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a>&gt;</p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>input与output看程序模板就好，看题面容易被误导，这里的交点是指地址相同，而不是值相同。</p><h4 id="方法一：-哈希表）"><a href="#方法一：-哈希表）" class="headerlink" title="方法一：(哈希表）"></a>方法一：(哈希表）</h4><p>因为同一条链表的结点一定不相同，所以可以用unordered_set来存结点。</p><p>然后遍历另外一条链表，去unordered_set中找是否有相同的节点存在。</p><p>unordered_set是采用哈希实现的，各种操作的时间复杂度可以看作$O(1)$。</p><p>时间复杂度$O(n1+n2)$，空间复杂度$O(n1）$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode*&gt; ust;</span><br><span class="line">        ListNode* tmp=headA;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ust.<span class="built_in">insert</span>(tmp);</span><br><span class="line">            tmp=tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp=headB;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ust.<span class="built_in">count</span>(tmp))&#123;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp=tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h4><p>如果两条链表其中一条为NULL，则没有交点，返回NULL；</p><p>t1指向headA的头结点，t2指向headB的头结点，t1与t2每次都向后移动一位，如果$t1-&gt;next==NULL$，则t1从headB的头结点开始遍历；如果$t2-&gt;next==NULL$，则t2从headA的头结点开始遍历。</p><p>如果t1与t2同时为NULL，则返回NULL，无交点；</p><p>如果$t1==t2​$，则返回t1，t1为交点。</p><h5 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a><strong>正确性</strong></h5><p>无交点：链表A与链表B长度相同，t1与t2同时为NULL；链表A与链表B长度不同，t1与t2在把两条链表都遍历完后同时为NULL。</p><p>有交点：链表A与链表B长度相同，遍历到交点时$t1==t2 !=NULL$；链表A与链表B长度不同，t1与t2在遍历完原来的链表后在遍历另一条链表时，会同时到达交点$t1==t2=!NULL$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(headA==<span class="literal">NULL</span>||headB==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* t1=headA;</span><br><span class="line">        ListNode* t2=headB;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1==t2) <span class="keyword">return</span> t1;</span><br><span class="line">            t1=t1-&gt;next;</span><br><span class="line">            t2=t2-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(t1==<span class="literal">NULL</span>||t2==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t1==<span class="literal">NULL</span>&amp;&amp;t2==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t1==<span class="literal">NULL</span>) t1=headB;</span><br><span class="line">                <span class="keyword">else</span> t2=headA;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.4 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;&amp;lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/&quot;&gt;&amp;lt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="链表" scheme="https://benyang0506.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="哈希表" scheme="https://benyang0506.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="双指针" scheme="https://benyang0506.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>连续数组</title>
    <link href="https://benyang0506.github.io/2021/06/03/%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/"/>
    <id>https://benyang0506.github.io/2021/06/03/%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</id>
    <published>2021-06-03T02:32:09.000Z</published>
    <updated>2021-06-03T02:54:05.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.3 每日一题</p><p>传送门：<a href="&lt;https://leetcode-cn.com/problems/contiguous-array/">&lt;https://leetcode-cn.com/problems/contiguous-array/</a>&gt;</p><span id="more"></span><p><img src="/.io//QQ截图20210603103228.png" alt></p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><p>遍历起点终点+前缀和，时间复杂度$O(n^2)$</p><h4 id="前缀和-哈希表"><a href="#前缀和-哈希表" class="headerlink" title="前缀和+哈希表"></a>前缀和+哈希表</h4><p>可以将数组中的0视为-1，然后可以将题意理解为找和为0的最长连续子数组。</p><p>记前缀和数组为$q[N]$，下标$i$到下标$j$的区间和为$q[j]-q[i-1]$，假如$q[i-1]$和$q[j]$的值相同，那么$(q[j]-q[i-1])$等于0，符合条件。</p><p>因此，只需要求最长的符合条件的情况，这里采用哈希表来降低时间复杂度。哈希表的$key$为前缀和，$value$为这个前缀和第一次出现的索引。</p><p>在程序中遍历一次前缀和数组，如果在哈希表中没有出现，则存入哈希表；如果出现过可以更maxn，此时不需要更新哈希表。</p><p>注意：要将前缀和为0存入前缀和的第一项。</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxLength</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//前缀和</span></span><br><span class="line">        <span class="keyword">int</span> q[<span class="number">100100</span>];</span><br><span class="line">        q[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">1</span>)&#123;</span><br><span class="line">               q[i+<span class="number">1</span>]=q[i]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               q[i+<span class="number">1</span>]=q[i]<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//哈希表</span></span><br><span class="line">        map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">        mp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tnt=q[i];</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(tnt)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                maxn=<span class="built_in">max</span>(maxn,i-mp[tnt]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mp[tnt]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.3 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;&amp;lt;https://leetcode-cn.com/problems/contiguous-array/&quot;&gt;&amp;lt;https://leetcode-cn.com/problems/contiguous-array/&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="哈希表" scheme="https://benyang0506.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="前缀和" scheme="https://benyang0506.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>连续的子数组和</title>
    <link href="https://benyang0506.github.io/2021/06/02/%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <id>https://benyang0506.github.io/2021/06/02/%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</id>
    <published>2021-06-02T02:41:51.000Z</published>
    <updated>2021-06-04T02:51:25.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>6.2 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/continuous-subarray-sum/">https://leetcode-cn.com/problems/continuous-subarray-sum/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><img src="/.io//Snipaste_2021-06-02_10-45-02.png" alt></p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><p>枚举起点，枚举终点，计算区间和，时间复杂度$O(n^3)​$</p><p>计算区间和改用前缀和，时间复杂度$O(n^2)​$</p><h4 id="前缀和-哈希表"><a href="#前缀和-哈希表" class="headerlink" title="前缀和+哈希表"></a>前缀和+哈希表</h4><p>记前缀和数组为$q[N]$，下标$i$到下标$j$的区间和为$q[j]-q[i-1]$，假如$(q[j]-q[i-1])$为$k$的倍数。</p><p>则$q[i-1]$和$q[j]$对$k$取余的结果相同。</p><p>因此，只需要求出每一位的前缀和对$k$取余的结果就好，这里采用哈希表来降低时间复杂度。哈希表的$key$为余数，$value$为这个余数第一次出现的索引。</p><p>在程序中遍历一次前缀和数组（前缀和数组可以直接存前缀和余数），如果在哈希表中没有出现，则存入哈希表；如果出现过可以判断索引差是否大于等于2（题设要求子数组长度至少为2），此时不需要更新哈希表。</p><p>注意：要将余数为0存入前缀和的第一项，保证遍历过程中如果遇到前缀和余数为0可以返回true。</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkSubarraySum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q[(<span class="keyword">int</span>)<span class="number">1e5</span>+<span class="number">10</span>];</span><br><span class="line">        q[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            q[i+<span class="number">1</span>]=(q[i]+nums[i])%k;</span><br><span class="line">            cout&lt;&lt;q[i+<span class="number">1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">        mp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tnt=q[i];</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(tnt)==<span class="number">0</span>)&#123;</span><br><span class="line">                mp[tnt]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((i-mp[tnt])&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;6.2 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/continuous-subarray-sum/&quot;&gt;https://leetcode-cn.com/problems/continuous-subarray-sum/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="哈希表" scheme="https://benyang0506.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="前缀和" scheme="https://benyang0506.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>HousePrice</title>
    <link href="https://benyang0506.github.io/2021/06/01/HousePrice/"/>
    <id>https://benyang0506.github.io/2021/06/01/HousePrice/</id>
    <published>2021-06-01T08:21:04.000Z</published>
    <updated>2021-06-01T08:54:28.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、采集数据"><a href="#一、采集数据" class="headerlink" title="一、采集数据"></a>一、采集数据</h2><h3 id="1、导入数据分析数据格式"><a href="#1、导入数据分析数据格式" class="headerlink" title="1、导入数据分析数据格式"></a>1、导入数据分析数据格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_path = <span class="string">&#x27;train.csv&#x27;</span></span><br><span class="line">train_data = pd.read_csv(train_path)</span><br><span class="line">train_data = train_data.drop(<span class="string">&#x27;Id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">test_path = <span class="string">&#x27;test.csv&#x27;</span></span><br><span class="line">test_data = pd.read_csv(test_path)</span><br><span class="line">test_data = test_data.drop(<span class="string">&#x27;Id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">test_data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>MSSubClass</th>      <th>MSZoning</th>      <th>LotFrontage</th>      <th>LotArea</th>      <th>Street</th>      <th>Alley</th>      <th>LotShape</th>      <th>LandContour</th>      <th>Utilities</th>      <th>LotConfig</th>      <th>...</th>      <th>ScreenPorch</th>      <th>PoolArea</th>      <th>PoolQC</th>      <th>Fence</th>      <th>MiscFeature</th>      <th>MiscVal</th>      <th>MoSold</th>      <th>YrSold</th>      <th>SaleType</th>      <th>SaleCondition</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>20</td>      <td>RH</td>      <td>80.0</td>      <td>11622</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>120</td>      <td>0</td>      <td>NaN</td>      <td>MnPrv</td>      <td>NaN</td>      <td>0</td>      <td>6</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>1</th>      <td>20</td>      <td>RL</td>      <td>81.0</td>      <td>14267</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Corner</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>Gar2</td>      <td>12500</td>      <td>6</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>2</th>      <td>60</td>      <td>RL</td>      <td>74.0</td>      <td>13830</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>MnPrv</td>      <td>NaN</td>      <td>0</td>      <td>3</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>3</th>      <td>60</td>      <td>RL</td>      <td>78.0</td>      <td>9978</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>6</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>4</th>      <td>120</td>      <td>RL</td>      <td>43.0</td>      <td>5005</td>      <td>Pave</td>      <td>NaN</td>      <td>IR1</td>      <td>HLS</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>144</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>1</td>      <td>2010</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1454</th>      <td>160</td>      <td>RM</td>      <td>21.0</td>      <td>1936</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>6</td>      <td>2006</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>1455</th>      <td>160</td>      <td>RM</td>      <td>21.0</td>      <td>1894</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>4</td>      <td>2006</td>      <td>WD</td>      <td>Abnorml</td>    </tr>    <tr>      <th>1456</th>      <td>20</td>      <td>RL</td>      <td>160.0</td>      <td>20000</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>9</td>      <td>2006</td>      <td>WD</td>      <td>Abnorml</td>    </tr>    <tr>      <th>1457</th>      <td>85</td>      <td>RL</td>      <td>62.0</td>      <td>10441</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>MnPrv</td>      <td>Shed</td>      <td>700</td>      <td>7</td>      <td>2006</td>      <td>WD</td>      <td>Normal</td>    </tr>    <tr>      <th>1458</th>      <td>60</td>      <td>RL</td>      <td>74.0</td>      <td>9627</td>      <td>Pave</td>      <td>NaN</td>      <td>Reg</td>      <td>Lvl</td>      <td>AllPub</td>      <td>Inside</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>0</td>      <td>11</td>      <td>2006</td>      <td>WD</td>      <td>Normal</td>    </tr>  </tbody></table><p>1459 rows × 79 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp3 =train_data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"><span class="comment"># tmp3</span></span><br><span class="line">tmp3[tmp3&gt;<span class="number">0</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PoolQC          1453</span><br><span class="line">MiscFeature     1406</span><br><span class="line">Alley           1369</span><br><span class="line">Fence           1179</span><br><span class="line">FireplaceQu      690</span><br><span class="line">LotFrontage      259</span><br><span class="line">GarageYrBlt       81</span><br><span class="line">GarageType        81</span><br><span class="line">GarageFinish      81</span><br><span class="line">GarageQual        81</span><br><span class="line">GarageCond        81</span><br><span class="line">BsmtFinType2      38</span><br><span class="line">BsmtExposure      38</span><br><span class="line">BsmtFinType1      37</span><br><span class="line">BsmtCond          37</span><br><span class="line">BsmtQual          37</span><br><span class="line">MasVnrArea         8</span><br><span class="line">MasVnrType         8</span><br><span class="line">Electrical         1</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="2、理解数据"><a href="#2、理解数据" class="headerlink" title="2、理解数据"></a>2、理解数据</h3><hr><p><img src="/.io//data_us1.png" alt></p><p><img src="/.io//data_us2.png" alt></p><h2 id="二、探索性可视化"><a href="#二、探索性可视化" class="headerlink" title="二、探索性可视化"></a>二、探索性可视化</h2><h3 id="2-1-售价"><a href="#2-1-售价" class="headerlink" title="2.1 售价"></a>2.1 售价</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">&#x27;SalePrice&#x27;</span>].describe()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count      1460.000000</span><br><span class="line">mean     180921.195890</span><br><span class="line">std       79442.502883</span><br><span class="line">min       34900.000000</span><br><span class="line">25%      129975.000000</span><br><span class="line">50%      163000.000000</span><br><span class="line">75%      214000.000000</span><br><span class="line">max      755000.000000</span><br><span class="line">Name: SalePrice, dtype: float64</span><br></pre></td></tr></table></figure><p>通过观察，SalePrice没有无效或者非数值数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># sns.set()</span></span><br><span class="line">sns.displot(train_data[<span class="string">&#x27;SalePrice&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1ece6c52e50&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Figure size 864x576 with 0 Axes&gt;</span><br></pre></td></tr></table></figure><p><img src="/.io//output_9_2.png" alt></p><p>​    </p><h3 id="2-2-售价与房屋面积"><a href="#2-2-售价与房屋面积" class="headerlink" title="2.2 售价与房屋面积"></a>2.2 售价与房屋面积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># warnings.filterwarnings(&#x27;ignore&#x27;)</span></span><br><span class="line"><span class="comment"># plt.figure(figsize=(12, 8))</span></span><br><span class="line"><span class="comment"># plt.scatter(train_data[&#x27;LotArea&#x27;], train_data[&#x27;SalePrice&#x27;])</span></span><br><span class="line"><span class="comment"># plt.xlabel(&#x27;LotArea&#x27;)</span></span><br><span class="line"><span class="comment"># plt.ylabel(&#x27;SalePrice&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line">sns.relplot(<span class="string">&#x27;LotArea&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1ece819e7c0&gt;</span><br></pre></td></tr></table></figure><p><img src="/.io//output_11_1.png" alt="png"></p><p>​    </p><h3 id="2-3-售价与建造时间"><a href="#2-3-售价与建造时间" class="headerlink" title="2.3 售价与建造时间"></a>2.3 售价与建造时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">sns.boxplot(train_data[<span class="string">&#x27;YearBuilt&#x27;</span>], train_data[<span class="string">&#x27;SalePrice&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.io//output_13_0.png" alt="png"></p><p>​    </p><h3 id="2-4-售价与地理位置"><a href="#2-4-售价与地理位置" class="headerlink" title="2.4 售价与地理位置"></a>2.4 售价与地理位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.figure(figsize=(12, 8))</span></span><br><span class="line"><span class="comment"># sns.boxplot(train_data[&#x27;Neighborhood&#x27;], train_data[&#x27;SalePrice&#x27;])</span></span><br><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;strip&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.io//output_15_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;point&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.io//output_16_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.io//output_17_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;Neighborhood&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.io//output_18_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># g = sns.catplot(&#x27;Neighborhood&#x27;, &#x27;SalePrice&#x27;, data=train_data, kind=&#x27;violin&#x27;)</span></span><br><span class="line"><span class="comment"># g.fig.set_size_inches(12, 8)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure><h3 id="2-5-售价与装修评级"><a href="#2-5-售价与装修评级" class="headerlink" title="2.5 售价与装修评级"></a>2.5 售价与装修评级</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = sns.catplot(<span class="string">&#x27;OverallQual&#x27;</span>, <span class="string">&#x27;SalePrice&#x27;</span>, data=train_data, kind=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">g.fig.set_size_inches(<span class="number">12</span>, <span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.io//output_21_0.png" alt="png"></p><p>​    </p><h2 id="三、特征提取"><a href="#三、特征提取" class="headerlink" title="三、特征提取"></a>三、特征提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">corrmat = train_data.corr()</span><br><span class="line">sns.heatmap(corrmat, annot=<span class="literal">False</span>, vmax=<span class="number">1</span>, vmin=-<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br><span class="line">corrmat[<span class="string">&#x27;SalePrice&#x27;</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="/.io//output_23_0.png" alt="png"></p><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">SalePrice        1.000000</span><br><span class="line">OverallQual      0.790982</span><br><span class="line">GrLivArea        0.708624</span><br><span class="line">GarageCars       0.640409</span><br><span class="line">GarageArea       0.623431</span><br><span class="line">TotalBsmtSF      0.613581</span><br><span class="line">1stFlrSF         0.605852</span><br><span class="line">FullBath         0.560664</span><br><span class="line">TotRmsAbvGrd     0.533723</span><br><span class="line">YearBuilt        0.522897</span><br><span class="line">YearRemodAdd     0.507101</span><br><span class="line">GarageYrBlt      0.486362</span><br><span class="line">MasVnrArea       0.477493</span><br><span class="line">Fireplaces       0.466929</span><br><span class="line">BsmtFinSF1       0.386420</span><br><span class="line">LotFrontage      0.351799</span><br><span class="line">WoodDeckSF       0.324413</span><br><span class="line">2ndFlrSF         0.319334</span><br><span class="line">OpenPorchSF      0.315856</span><br><span class="line">HalfBath         0.284108</span><br><span class="line">LotArea          0.263843</span><br><span class="line">BsmtFullBath     0.227122</span><br><span class="line">BsmtUnfSF        0.214479</span><br><span class="line">BedroomAbvGr     0.168213</span><br><span class="line">ScreenPorch      0.111447</span><br><span class="line">PoolArea         0.092404</span><br><span class="line">MoSold           0.046432</span><br><span class="line">3SsnPorch        0.044584</span><br><span class="line">BsmtFinSF2      -0.011378</span><br><span class="line">BsmtHalfBath    -0.016844</span><br><span class="line">MiscVal         -0.021190</span><br><span class="line">LowQualFinSF    -0.025606</span><br><span class="line">YrSold          -0.028923</span><br><span class="line">OverallCond     -0.077856</span><br><span class="line">MSSubClass      -0.084284</span><br><span class="line">EnclosedPorch   -0.128578</span><br><span class="line">KitchenAbvGr    -0.135907</span><br><span class="line">Name: SalePrice, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">SPcorrmat = train_data.corr()[<span class="string">u&#x27;SalePrice&#x27;</span>]</span><br><span class="line">SPcorrmat = SPcorrmat.sort_values(key=<span class="built_in">abs</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 和上面取出的结果一样</span></span><br><span class="line">plt.plot(SPcorrmat.head(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x1ecf2abffa0&gt;]</span><br></pre></td></tr></table></figure><p><img src="/.io//output_24_1.png" alt="png"></p><p>​    </p><p>取与SalePrice相关性较大的几个特征，暂时先取6个。<br>OverallQual、GrLivArea、GarageCars、GarageArea、TotalBsmtSF、1stFlrSF</p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;extracted_data.csv&#x27;</span></span><br><span class="line">data = pd.read_csv(path)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>OverallQual</th>      <th>GrLivArea</th>      <th>GarageCars</th>      <th>GarageArea</th>      <th>TotalBsmtSF</th>      <th>1stFlrSF</th>      <th>SalePrice</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7</td>      <td>1710</td>      <td>2</td>      <td>548</td>      <td>856</td>      <td>856</td>      <td>208500</td>    </tr>    <tr>      <th>1</th>      <td>6</td>      <td>1262</td>      <td>2</td>      <td>460</td>      <td>1262</td>      <td>1262</td>      <td>181500</td>    </tr>    <tr>      <th>2</th>      <td>7</td>      <td>1786</td>      <td>2</td>      <td>608</td>      <td>920</td>      <td>920</td>      <td>223500</td>    </tr>    <tr>      <th>3</th>      <td>7</td>      <td>1717</td>      <td>3</td>      <td>642</td>      <td>756</td>      <td>961</td>      <td>140000</td>    </tr>    <tr>      <th>4</th>      <td>8</td>      <td>2198</td>      <td>3</td>      <td>836</td>      <td>1145</td>      <td>1145</td>      <td>250000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1455</th>      <td>6</td>      <td>1647</td>      <td>2</td>      <td>460</td>      <td>953</td>      <td>953</td>      <td>175000</td>    </tr>    <tr>      <th>1456</th>      <td>6</td>      <td>2073</td>      <td>2</td>      <td>500</td>      <td>1542</td>      <td>2073</td>      <td>210000</td>    </tr>    <tr>      <th>1457</th>      <td>7</td>      <td>2340</td>      <td>1</td>      <td>252</td>      <td>1152</td>      <td>1188</td>      <td>266500</td>    </tr>    <tr>      <th>1458</th>      <td>5</td>      <td>1078</td>      <td>1</td>      <td>240</td>      <td>1078</td>      <td>1078</td>      <td>142125</td>    </tr>    <tr>      <th>1459</th>      <td>5</td>      <td>1256</td>      <td>1</td>      <td>276</td>      <td>1256</td>      <td>1256</td>      <td>147500</td>    </tr>  </tbody></table><p>1460 rows × 7 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp = data.isnull().<span class="built_in">sum</span>()</span><br><span class="line">tmp</span><br><span class="line"><span class="comment"># tmp[tmp&gt;0].sort_values(ascending=False)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OverallQual    0</span><br><span class="line">GrLivArea      0</span><br><span class="line">GarageCars     0</span><br><span class="line">GarageArea     0</span><br><span class="line">TotalBsmtSF    0</span><br><span class="line">1stFlrSF       0</span><br><span class="line">SalePrice      0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="特征归一化"><a href="#特征归一化" class="headerlink" title="特征归一化"></a>特征归一化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sp = data.iloc[:, -<span class="number">1</span>]</span><br><span class="line">data = (data - data.mean()) / data.std()</span><br><span class="line">data[<span class="string">&#x27;SalePrice&#x27;</span>] = sp</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>OverallQual</th>      <th>GrLivArea</th>      <th>GarageCars</th>      <th>GarageArea</th>      <th>TotalBsmtSF</th>      <th>1stFlrSF</th>      <th>SalePrice</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.651256</td>      <td>0.370207</td>      <td>0.311618</td>      <td>0.350880</td>      <td>-0.459145</td>      <td>-0.793162</td>      <td>208500</td>    </tr>    <tr>      <th>1</th>      <td>-0.071812</td>      <td>-0.482347</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>0.466305</td>      <td>0.257052</td>      <td>181500</td>    </tr>    <tr>      <th>2</th>      <td>0.651256</td>      <td>0.514836</td>      <td>0.311618</td>      <td>0.631510</td>      <td>-0.313261</td>      <td>-0.627611</td>      <td>223500</td>    </tr>    <tr>      <th>3</th>      <td>0.651256</td>      <td>0.383528</td>      <td>1.649742</td>      <td>0.790533</td>      <td>-0.687089</td>      <td>-0.521555</td>      <td>140000</td>    </tr>    <tr>      <th>4</th>      <td>1.374324</td>      <td>1.298881</td>      <td>1.649742</td>      <td>1.697903</td>      <td>0.199611</td>      <td>-0.045596</td>      <td>250000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1455</th>      <td>-0.071812</td>      <td>0.250316</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>-0.238040</td>      <td>-0.542249</td>      <td>175000</td>    </tr>    <tr>      <th>1456</th>      <td>-0.071812</td>      <td>1.061003</td>      <td>0.311618</td>      <td>0.126376</td>      <td>1.104547</td>      <td>2.354894</td>      <td>210000</td>    </tr>    <tr>      <th>1457</th>      <td>0.651256</td>      <td>1.569110</td>      <td>-1.026506</td>      <td>-1.033560</td>      <td>0.215567</td>      <td>0.065634</td>      <td>266500</td>    </tr>    <tr>      <th>1458</th>      <td>-0.794879</td>      <td>-0.832502</td>      <td>-1.026506</td>      <td>-1.089686</td>      <td>0.046889</td>      <td>-0.218907</td>      <td>142125</td>    </tr>    <tr>      <th>1459</th>      <td>-0.794879</td>      <td>-0.493765</td>      <td>-1.026506</td>      <td>-0.921308</td>      <td>0.452629</td>      <td>0.241532</td>      <td>147500</td>    </tr>  </tbody></table><p>1460 rows × 7 columns</p></div><h2 id="四、多变量线性回归模型"><a href="#四、多变量线性回归模型" class="headerlink" title="四、多变量线性回归模型"></a>四、多变量线性回归模型</h2><h3 id="4-1-数据预处理"><a href="#4-1-数据预处理" class="headerlink" title="4.1 数据预处理"></a>4.1 数据预处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ones</th>      <th>OverallQual</th>      <th>GrLivArea</th>      <th>GarageCars</th>      <th>GarageArea</th>      <th>TotalBsmtSF</th>      <th>1stFlrSF</th>      <th>SalePrice</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0.651256</td>      <td>0.370207</td>      <td>0.311618</td>      <td>0.350880</td>      <td>-0.459145</td>      <td>-0.793162</td>      <td>208500</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>-0.071812</td>      <td>-0.482347</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>0.466305</td>      <td>0.257052</td>      <td>181500</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0.651256</td>      <td>0.514836</td>      <td>0.311618</td>      <td>0.631510</td>      <td>-0.313261</td>      <td>-0.627611</td>      <td>223500</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>0.651256</td>      <td>0.383528</td>      <td>1.649742</td>      <td>0.790533</td>      <td>-0.687089</td>      <td>-0.521555</td>      <td>140000</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>1.374324</td>      <td>1.298881</td>      <td>1.649742</td>      <td>1.697903</td>      <td>0.199611</td>      <td>-0.045596</td>      <td>250000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1455</th>      <td>1</td>      <td>-0.071812</td>      <td>0.250316</td>      <td>0.311618</td>      <td>-0.060710</td>      <td>-0.238040</td>      <td>-0.542249</td>      <td>175000</td>    </tr>    <tr>      <th>1456</th>      <td>1</td>      <td>-0.071812</td>      <td>1.061003</td>      <td>0.311618</td>      <td>0.126376</td>      <td>1.104547</td>      <td>2.354894</td>      <td>210000</td>    </tr>    <tr>      <th>1457</th>      <td>1</td>      <td>0.651256</td>      <td>1.569110</td>      <td>-1.026506</td>      <td>-1.033560</td>      <td>0.215567</td>      <td>0.065634</td>      <td>266500</td>    </tr>    <tr>      <th>1458</th>      <td>1</td>      <td>-0.794879</td>      <td>-0.832502</td>      <td>-1.026506</td>      <td>-1.089686</td>      <td>0.046889</td>      <td>-0.218907</td>      <td>142125</td>    </tr>    <tr>      <th>1459</th>      <td>1</td>      <td>-0.794879</td>      <td>-0.493765</td>      <td>-1.026506</td>      <td>-0.921308</td>      <td>0.452629</td>      <td>0.241532</td>      <td>147500</td>    </tr>  </tbody></table><p>1460 rows × 8 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cols = data.shape[<span class="number">1</span>]</span><br><span class="line">x = data.iloc[:, <span class="number">0</span>:cols-<span class="number">1</span>]</span><br><span class="line">y = data.iloc[:, cols-<span class="number">1</span>:cols]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.matrix(x.values)</span><br><span class="line">y = np.matrix(y.values)</span><br><span class="line">theta = np.matrix(np.zeros(x.shape[<span class="number">1</span>]))</span><br><span class="line">theta</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix([[0., 0., 0., 0., 0., 0., 0.]])</span><br></pre></td></tr></table></figure><h3 id="4-2-线性回归"><a href="#4-2-线性回归" class="headerlink" title="4.2 线性回归"></a>4.2 线性回归</h3><h4 id="计算损失函数"><a href="#计算损失函数" class="headerlink" title="计算损失函数"></a>计算损失函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span>(<span class="params">X, y, theta</span>):</span></span><br><span class="line">    inner = np.power((X * theta.T - y), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.<span class="built_in">sum</span>(inner) / (<span class="number">2</span> * <span class="built_in">len</span>(X)))</span><br></pre></td></tr></table></figure><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span>(<span class="params">x, y, theta, alpha, iters</span>):</span></span><br><span class="line"><span class="comment">#     存theta的向量</span></span><br><span class="line">    temp = np.matrix(np.zeros(theta.shape))</span><br><span class="line"><span class="comment">#     参数（特征）数量</span></span><br><span class="line">    parameters = <span class="built_in">int</span>(theta.ravel().shape[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#     每一代的代价</span></span><br><span class="line">    cost = np.zeros(iters)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        error = (x * theta.T) - y</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(parameters):</span><br><span class="line">            term = np.multiply(error, x[:, j])</span><br><span class="line">            temp[<span class="number">0</span>, j] = theta[<span class="number">0</span>, j] - ((alpha / <span class="built_in">len</span>(x)) * np.<span class="built_in">sum</span>(term))</span><br><span class="line">        </span><br><span class="line">        theta = temp</span><br><span class="line">        cost[i] = computeCost(x, y, theta)</span><br><span class="line">    <span class="keyword">return</span> theta, cost</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g1, cost1 = gradientDescent(x, y, theta, <span class="number">0.01</span>, <span class="number">1500</span>)</span><br><span class="line">g1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matrix([[180921.14457104,  33281.60801039,  22604.1908728 ,</span><br><span class="line">          10412.0350517 ,   3775.32504803,  10488.68941045,</span><br><span class="line">           4493.38109433]])</span><br></pre></td></tr></table></figure><p>观察cost曲线，看看有没有收敛</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">1500</span>, <span class="number">1500</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.plot(t, cost1, label=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;iters&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.io//output_43_0.png" alt="png"></p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([137944.88106755, 136222.15953388, 134542.47251256, ...,</span><br><span class="line">        27400.60027344,  27400.59914954,  27400.5980284 ])</span><br></pre></td></tr></table></figure><h2 id="五、做预测"><a href="#五、做预测" class="headerlink" title="五、做预测"></a>五、做预测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2 = test_data</span><br><span class="line">data2 = data2.loc[:, [<span class="string">&#x27;OverallQual&#x27;</span>, <span class="string">&#x27;GrLivArea&#x27;</span>, <span class="string">&#x27;GarageCars&#x27;</span>, <span class="string">&#x27;GarageArea&#x27;</span>, <span class="string">&#x27;TotalBsmtSF&#x27;</span>, <span class="string">&#x27;1stFlrSF&#x27;</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp4 = data2.isnull().<span class="built_in">sum</span>()</span><br><span class="line">tmp4[tmp4&gt;<span class="number">0</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TotalBsmtSF    1</span><br><span class="line">GarageArea     1</span><br><span class="line">GarageCars     1</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">&#x27;TotalBsmtSF&#x27;</span>, <span class="string">&#x27;GarageArea&#x27;</span>, <span class="string">&#x27;GarageCars&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">    data2[col].fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># tmp4 = data2.isnull().sum()</span></span><br><span class="line"><span class="comment"># tmp4[tmp4&gt;0].sort_values(ascending=False)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series([], dtype: int64)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data2 = (data2 - data2.mean()) / data2.std()</span><br><span class="line">data2.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cols = data2.shape[<span class="number">1</span>]</span><br><span class="line">x2 = np.matrix(data2.values)</span><br><span class="line">y2 = x2 * g1.T</span><br><span class="line">y2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix([[115885.01852303],</span><br><span class="line">        [167400.04822819],</span><br><span class="line">        [160547.77546842],</span><br><span class="line">        ...,</span><br><span class="line">        [153666.34643612],</span><br><span class="line">        [ 94793.69583206],</span><br><span class="line">        [242838.70740226]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(y2)</span><br><span class="line">tmp2 = df1.isnull().<span class="built_in">sum</span>()</span><br><span class="line">tmp2</span><br><span class="line"><span class="comment"># tmp2[tmp2&gt;0].sort_values(ascending=False)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0    0</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(y2)</span><br><span class="line">names=[<span class="string">&#x27;SalePrice&#x27;</span>]</span><br><span class="line">df.columns = names</span><br><span class="line">test_data_output = pd.read_csv(test_path)</span><br><span class="line">df.insert(<span class="number">0</span>, <span class="string">&#x27;Id&#x27;</span>, test_data_output.iloc[:, <span class="number">0</span>])</span><br><span class="line">df.to_csv(<span class="string">&quot;submission2.csv&quot;</span>, index=<span class="literal">False</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="六、在kaggle上提交"><a href="#六、在kaggle上提交" class="headerlink" title="六、在kaggle上提交"></a>六、在kaggle上提交</h2><p><img src="/.io//submit1.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、采集数据&quot;&gt;&lt;a href=&quot;#一、采集数据&quot; class=&quot;headerlink&quot; title=&quot;一、采集数据&quot;&gt;&lt;/a&gt;一、采集数据&lt;/h2&gt;&lt;h3 id=&quot;1、导入数据分析数据格式&quot;&gt;&lt;a href=&quot;#1、导入数据分析数据格式&quot; class=&quot;headerlink&quot; title=&quot;1、导入数据分析数据格式&quot;&gt;&lt;/a&gt;1、导入数据分析数据格式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; seaborn &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; warnings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; StandardScaler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://benyang0506.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="kaggle" scheme="https://benyang0506.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/kaggle/"/>
    
    
    <category term="线性回归" scheme="https://benyang0506.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>4的幂</title>
    <link href="https://benyang0506.github.io/2021/05/31/4%E7%9A%84%E5%B9%82/"/>
    <id>https://benyang0506.github.io/2021/05/31/4%E7%9A%84%E5%B9%82/</id>
    <published>2021-05-31T01:26:44.000Z</published>
    <updated>2021-06-02T02:45:58.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>5.31 每日一题</p><p>传送门：<a href="https://leetcode-cn.com/problems/power-of-four/">https://leetcode-cn.com/problems/power-of-four/</a></p><span id="more"></span><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><img src="/.io//题面.png" alt></p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">16</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">4</span>, i)==n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二进制中1的位置"><a href="#二进制中1的位置" class="headerlink" title="二进制中1的位置"></a>二进制中1的位置</h4><p>如果一个数是4的幂，那么它也一定是2的幂，判断一个数是否为2的幂，可以用x&amp;(x-1)来判断</p><p>如果一个数为2的幂，则其二进制表示含且只含1；4的幂次：1，100，10000，1000000…，其二进制表示只含有一个1，且1所在的位置在奇数位（从低位往高位看，且最低位为第1位）</p><p>最后判断唯一的一个1在奇数位还是偶数位，可以用x&amp;0x55555555来判断（0x5=0x0101可以判断奇数位上的1）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;(n<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">0x55555555</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h4><p>首先判断n是不是2的幂</p><p>如果n是4的幂，那么它模3结果为1</p><script type="math/tex; mode=display">4^n\equiv(3+1)^n\equiv1^n\equiv1\pmod n</script><p>如果n是2的幂确不是4的幂，那么n可以表示为2*4的幂，其模3结果为2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;(n<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h2&gt;&lt;p&gt;5.31 每日一题&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://leetcode-cn.com/problems/power-of-four/&quot;&gt;https://leetcode-cn.com/problems/power-of-four/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/"/>
    
    <category term="每日一题" scheme="https://benyang0506.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="数论" scheme="https://benyang0506.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>九龙山</title>
    <link href="https://benyang0506.github.io/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/"/>
    <id>https://benyang0506.github.io/2021/05/16/%E4%B9%9D%E9%BE%99%E5%B1%B1/</id>
    <published>2021-05-16T12:10:38.000Z</published>
    <updated>2021-05-17T01:16:50.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="九龙山"><a href="#九龙山" class="headerlink" title="九龙山"></a>九龙山</h3><p>平湖九龙山位于杭州湾出海口，想看海的朋友可以来看一下，离上海很近，人少（五一期间都没多少人），指望看到蔚蓝色的大海的朋友可能会失望了，不去后悔，去了更后悔的一个景点。</p><span id="more"></span><p><img src="/.io//1.jpg" alt></p><p><img src="/.io//2.jpg" alt="2"></p><p><img src="/.io//3.jpg" alt="3"></p><p><img src="/.io//4.jpg" alt="4"></p><p><img src="/.io//7.jpg" alt="7"></p><p><img src="/.io//5.jpg" alt="5"></p><p><img src="/.io//6.jpg" alt="6"></p><p><img src="/.io//8.jpg" alt="8"></p><p><img src="/.io//10.jpg" alt="9"></p><p><img src="/.io//9.jpg" alt="10"></p><p>最后感谢顾总从南京驱车300km来玩，为我实习之余的生活增添了很多乐趣。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;九龙山&quot;&gt;&lt;a href=&quot;#九龙山&quot; class=&quot;headerlink&quot; title=&quot;九龙山&quot;&gt;&lt;/a&gt;九龙山&lt;/h3&gt;&lt;p&gt;平湖九龙山位于杭州湾出海口，想看海的朋友可以来看一下，离上海很近，人少（五一期间都没多少人），指望看到蔚蓝色的大海的朋友可能会失望了，不去后悔，去了更后悔的一个景点。&lt;/p&gt;</summary>
    
    
    
    <category term="Moments" scheme="https://benyang0506.github.io/categories/Moments/"/>
    
    
    <category term="sea" scheme="https://benyang0506.github.io/tags/sea/"/>
    
    <category term="浙江平湖" scheme="https://benyang0506.github.io/tags/%E6%B5%99%E6%B1%9F%E5%B9%B3%E6%B9%96/"/>
    
  </entry>
  
</feed>
